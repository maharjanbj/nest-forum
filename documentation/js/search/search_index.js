var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.347,1,2.61]],["body/controllers/AppController.html",[0,2.129,1,4.123,2,1.68,3,0.228,4,0.202,5,0.202,6,4.003,7,0.625,8,1.678,9,5.852,10,2.06,11,0.018,12,1.046,13,4.654,14,1.324,15,1.146,16,0.747,17,0.905,18,3.875,19,4.003,20,0.228,21,0.07,22,2.787,23,1.388,24,1.324,25,4.654,26,0.014,27,0.014]],["title/modules/AppModule.html",[28,1.223,29,2.61]],["body/modules/AppModule.html",[1,3.642,2,1.598,3,0.149,4,0.132,5,0.132,11,0.018,16,0.876,17,0.594,18,3.785,19,2.627,20,0.149,21,0.046,26,0.01,27,0.01,28,1.707,29,5.156,30,1.428,31,1.428,32,1.605,33,1.605,34,1.428,35,2.736,36,1.605,37,2.627,38,2.627,39,2.627,40,4.074,41,4.074,42,4.074,43,4.074,44,3.785,45,3.785,46,2.326,47,1.605,48,1.605,49,3.054,50,2.651,51,3.054,52,2.627,53,3.054,54,2.627,55,3.054,56,1.282,57,1.968,58,3.054,59,1.829,60,0.955,61,3.054,62,3.054,63,3.054,64,3.054,65,3.054,66,3.054,67,3.054,68,1.709]],["title/injectables/AppService.html",[18,2.234,69,0.922]],["body/injectables/AppService.html",[3,0.24,4,0.213,5,0.213,7,0.66,8,1.735,9,5.966,11,0.018,12,1.104,14,1.397,15,1.185,16,0.622,17,0.955,18,3.651,20,0.24,21,0.074,24,1.397,26,0.014,27,0.014,69,1.507,70,2.062,71,4.225,72,4.911,73,4.911,74,4.911]],["title/injectables/AuthCheckGuard.html",[69,0.922,75,2.61]],["body/injectables/AuthCheckGuard.html",[3,0.328,4,0.158,5,0.158,7,0.49,8,1.428,11,0.018,12,0.82,14,1.038,16,0.727,17,0.709,20,0.246,21,0.076,24,1.428,26,0.012,27,0.012,69,1.418,70,1.531,75,3.509,76,2.801,77,2.288,78,4.935,79,4.316,80,4.935,81,2.602,82,3.647,83,1.14,84,0.901,85,0.578,86,1.038,87,4.935,88,3.137,89,2.801,90,3.137,91,4.316,92,3.137,93,3.854,94,2.801,95,2.041,96,2.801,97,2.551,98,2.35,99,3.509,100,2.808,101,2.551,102,2.35,103,3.137,104,3.137,105,3.137,106,2.801,107,3.137,108,3.137]],["title/controllers/AuthenticationController.html",[0,1.347,109,2.61]],["body/controllers/AuthenticationController.html",[0,0.854,2,0.854,3,0.116,4,0.103,5,0.103,7,0.318,8,1.04,10,1.978,11,0.018,12,1.005,14,1.272,15,0.711,16,0.822,17,0.46,20,0.116,21,0.036,23,1.333,24,1.272,26,0.009,27,0.009,81,0.898,83,1.397,84,1.105,85,0.91,86,1.272,94,1.818,95,1.324,98,1.525,102,2.88,109,2.557,110,2.036,111,1.417,112,2.036,113,4.092,114,3.657,115,3.657,116,3.657,117,2.366,118,2.366,119,3.657,120,3.657,121,2.366,122,2.366,123,5.027,124,3.126,125,2.366,126,4.469,127,5.027,128,5.027,129,2.366,130,2.366,131,3.657,132,3.657,133,2.366,134,2.366,135,2.366,136,3.516,137,3.657,138,2.366,139,2.501,140,1.818,141,1.417,142,2.366,143,2.366,144,2.366,145,2.19,146,2.036,147,2.501,148,2.036,149,2.366,150,2.348,151,2.036,152,1.655,153,2.366,154,3.657,155,3.657,156,2.366,157,2.036,158,1.243,159,2.366,160,2.366,161,2.366,162,1.171,163,2.348,164,2.366,165,2.366,166,1.106,167,2.366,168,0.854,169,1.818,170,1.525,171,1.417,172,2.366,173,2.366,174,2.366,175,2.366,176,1.171,177,1.655,178,2.366,179,1.655,180,2.366,181,1.525,182,2.366,183,1.525,184,2.366,185,1.525,186,2.366,187,2.366,188,1.818,189,2.366,190,2.366,191,2.366,192,2.366,193,2.366,194,2.366,195,2.366,196,2.366,197,2.366]],["title/modules/AuthenticationModule.html",[28,1.223,40,2.405]],["body/modules/AuthenticationModule.html",[2,1.631,3,0.154,4,0.136,5,0.136,11,0.018,16,0.902,17,0.611,20,0.154,21,0.048,26,0.011,27,0.011,28,1.735,30,1.469,31,1.469,32,1.651,33,1.651,34,1.469,35,2.78,36,1.651,40,4.587,45,3.822,46,2.374,47,1.651,48,1.651,50,2.706,52,2.703,59,1.882,60,0.982,81,1.192,84,0.777,95,1.759,109,3.701,145,3.822,146,2.703,150,3.354,151,2.703,166,1.469,198,2.703,199,2.703,200,3.142,201,4.114,202,3.142,203,3.142,204,2.912,205,2.198,206,3.161,207,3.142,208,3.471,209,3.142,210,3.142,211,3.887,212,2.414,213,3.142,214,3.142,215,2.025,216,2.703,217,3.142,218,3.142,219,2.414]],["title/injectables/AuthenticationService.html",[69,0.922,145,2.234]],["body/injectables/AuthenticationService.html",[3,0.183,4,0.162,5,0.162,7,0.501,8,1.45,11,0.018,12,1.146,14,1.061,16,0.854,17,0.725,20,0.183,21,0.056,23,1.112,24,1.061,26,0.012,27,0.012,60,1.166,69,1.26,70,1.566,81,1.415,83,1.593,84,1.26,85,0.808,86,1.45,113,3.741,124,2.609,139,2.852,140,2.865,145,3.052,147,2.088,148,3.209,162,2.523,163,1.96,170,3.741,176,1.846,177,2.609,205,2.609,220,3.209,221,5.096,222,2.609,223,3.491,224,3.73,225,3.564,226,5.096,227,3.73,228,2.088,229,2.234,230,1.566,231,3.915,232,2.609,233,3.73,234,3.73,235,3.209]],["title/classes/Category.html",[21,0.057,236,1.96]],["body/classes/Category.html",[3,0.208,4,0.184,5,0.184,7,0.571,10,1.881,11,0.018,12,0.955,15,1.081,16,0.705,20,0.303,21,0.064,26,0.013,27,0.013,60,1.328,68,3.112,77,1.695,85,0.881,166,2.6,168,2.007,176,2.103,230,1.784,236,3.256,237,1.328,238,2.972,239,4.761,240,4.335,241,4.249,242,2.972,243,4.335,244,2.972,245,2.972,246,4.249,247,2.972,248,2.972,249,3.264,250,2.972,251,3.655]],["title/controllers/CategoryController.html",[0,1.347,252,2.61]],["body/controllers/CategoryController.html",[0,1.041,2,1.041,3,0.141,4,0.125,5,0.125,7,0.387,8,1.208,10,2.622,11,0.018,12,1.331,14,1.685,15,1.304,16,0.704,17,0.56,20,0.141,21,0.044,22,1.726,23,0.86,24,1.685,26,0.01,27,0.01,83,1.737,84,1.373,85,0.88,86,1.581,111,1.726,139,2.375,141,3.016,236,1.515,252,2.968,253,2.48,254,1.532,255,2.598,256,1.985,257,1.985,258,1.985,259,2.48,260,3.709,261,2.883,262,2.883,263,1.348,264,2.735,265,2.883,266,2.742,267,1.348,268,2.735,269,2.883,270,1.348,271,4.235,272,3.523,273,2.883,274,1.858,275,1.858,276,3.016,277,2.016,278,1.427,279,2.541,280,1.348,281,2.883,282,1.858,283,2.883,284,2.883,285,1.858,286,2.883,287,1.858,288,2.883,289,1.858,290,2.883]],["title/modules/CategoryModule.html",[28,1.223,41,2.405]],["body/modules/CategoryModule.html",[2,1.941,3,0.198,4,0.175,5,0.175,11,0.018,16,0.85,17,0.785,20,0.198,21,0.061,26,0.013,27,0.013,28,1.981,30,1.888,31,1.888,32,2.122,33,2.122,34,1.888,35,3.176,36,2.122,41,4.448,46,2.825,47,2.122,48,2.122,50,2.418,59,2.418,60,1.263,84,0.998,166,1.888,215,2.603,236,2.122,250,3.76,252,4.227,276,4.132,277,2.825,291,3.474,292,3.474,293,4.038,294,3.474,295,3.474,296,4.038]],["title/injectables/CategoryService.html",[69,0.922,276,2.234]],["body/injectables/CategoryService.html",[3,0.14,4,0.124,5,0.124,7,0.385,8,1.202,11,0.018,12,1.39,14,1.681,15,1.302,16,0.783,17,0.557,20,0.14,21,0.043,23,0.855,24,1.681,26,0.01,27,0.01,60,0.896,69,1.045,70,1.203,83,1.847,84,1.46,85,0.936,86,1.681,162,2.092,163,1.506,223,3.101,228,1.604,230,1.203,236,1.506,249,2.202,254,1.526,255,2.591,256,1.976,257,1.976,258,1.976,259,4.318,260,3.317,263,1.976,266,2.453,267,1.976,270,1.976,271,4.228,276,2.53,278,1.419,279,2.53,280,1.34,295,2.465,297,2.465,298,2.866,299,2.866,300,4.226,301,2.866,302,2.866,303,2.866,304,2.866,305,2.866,306,2.866,307,2.866,308,2.866,309,2.866,310,2.866,311,2.866]],["title/classes/CreateCategoryDto.html",[21,0.057,260,2.234]],["body/classes/CreateCategoryDto.html",[3,0.273,4,0.242,5,0.242,11,0.017,20,0.273,21,0.085,26,0.016,27,0.016,237,1.746,260,3.947,312,4.804,313,3.599]],["title/classes/CreateFaqCategoryDto.html",[21,0.057,314,2.234]],["body/classes/CreateFaqCategoryDto.html",[3,0.233,4,0.207,5,0.207,7,0.64,11,0.017,12,1.346,15,1.334,20,0.233,21,0.072,26,0.014,27,0.014,56,2.747,85,0.949,168,2.161,171,3.918,237,1.49,239,5.026,313,3.073,314,3.584,315,3.239,316,5.629,317,4.767,318,4.767]],["title/classes/CreateFaqDto.html",[21,0.057,319,2.234]],["body/classes/CreateFaqDto.html",[3,0.273,4,0.242,5,0.242,11,0.017,20,0.273,21,0.085,26,0.016,27,0.016,237,1.746,319,3.947,320,4.804,321,4.29]],["title/classes/CreateQuestionDto.html",[21,0.057,322,2.234]],["body/classes/CreateQuestionDto.html",[3,0.273,4,0.242,5,0.242,11,0.017,20,0.273,21,0.085,26,0.016,27,0.016,237,1.746,322,3.947,323,4.804,324,4.29]],["title/classes/CreateUserDto.html",[21,0.057,325,2.234]],["body/classes/CreateUserDto.html",[3,0.273,4,0.242,5,0.242,11,0.017,20,0.273,21,0.085,26,0.016,27,0.016,237,1.746,325,3.947,326,4.804,327,4.29]],["title/classes/Faq.html",[21,0.057,56,1.567]],["body/classes/Faq.html",[3,0.167,4,0.148,5,0.148,7,0.457,10,2.449,11,0.018,12,1.244,15,1.166,16,0.76,20,0.271,21,0.052,26,0.011,27,0.011,56,2.519,60,1.065,68,3.537,77,1.358,85,1.067,166,2.586,168,1.727,176,1.686,230,1.43,236,2.906,237,1.065,240,4.42,242,2.382,243,3.869,244,2.382,245,2.382,247,2.382,248,3.346,328,2.382,329,5.531,330,3.312,331,3.405,332,3.357,333,2.929,334,2.929,335,4.784,336,3.405,337,3.405,338,2.929,339,3.405,340,3.405,341,2.039,342,2.382,343,2.929,344,2.616,345,2.616,346,3.405,347,2.616,348,2.616,349,2.382,350,2.929]],["title/classes/FaqCategory.html",[21,0.057,332,2.088]],["body/classes/FaqCategory.html",[3,0.185,4,0.164,5,0.164,7,0.509,10,2.28,11,0.018,12,1.158,15,1.221,16,0.653,20,0.286,21,0.057,26,0.012,27,0.012,60,1.184,68,3.878,77,1.511,85,0.927,166,2.408,168,1.859,171,3.504,176,1.875,230,1.591,237,1.184,239,4.495,240,4.092,242,2.649,243,4.092,244,2.649,245,2.649,247,2.649,248,3.602,315,2.896,332,3.275,338,3.259,341,3.504,345,2.91,351,2.649,352,3.788,353,3.788,354,3.788,355,3.788,356,2.91,357,2.441,358,3.259]],["title/controllers/FaqCategoryController.html",[0,1.347,359,2.61]],["body/controllers/FaqCategoryController.html",[0,0.991,2,0.991,3,0.134,4,0.119,5,0.119,7,0.369,8,1.165,10,2.569,11,0.018,12,1.305,14,1.651,15,1.287,16,0.687,17,0.534,20,0.134,21,0.042,22,1.644,23,0.819,24,1.651,26,0.01,27,0.01,56,2.278,57,3.922,83,1.696,84,1.341,85,0.86,86,1.544,111,1.644,139,2.291,141,2.931,236,2.151,254,1.478,255,2.537,256,1.914,257,1.914,258,1.914,263,1.284,264,2.638,266,2.694,267,1.284,268,2.638,270,1.284,272,1.92,274,1.769,275,1.769,277,1.92,278,1.359,279,2.451,280,1.284,282,1.769,285,1.769,287,1.769,289,1.769,314,3.644,315,3.012,359,2.863,360,2.362,361,2.362,362,2.745,363,2.745,364,2.745,365,2.745,366,4.176,367,3.144,368,2.745,369,2.931,370,2.362,371,2.745,372,2.745,373,2.745,374,2.745,375,2.745]],["title/modules/FaqCategoryModule.html",[28,1.223,42,2.405]],["body/modules/FaqCategoryModule.html",[2,1.915,3,0.194,4,0.172,5,0.172,11,0.018,16,0.845,17,0.769,20,0.194,21,0.06,26,0.013,27,0.013,28,1.961,30,1.85,31,1.85,32,2.079,33,2.079,34,1.85,35,3.143,36,2.079,42,4.422,46,2.787,47,2.079,48,2.079,50,2.369,56,2.227,57,2.55,59,2.369,60,1.237,84,0.978,166,1.85,215,2.55,277,2.767,294,3.404,315,1.958,332,2.214,342,2.767,347,3.039,357,3.418,359,4.184,369,4.108,376,3.404,377,3.404,378,3.957,379,3.404]],["title/injectables/FaqCategoryService.html",[69,0.922,369,2.234]],["body/injectables/FaqCategoryService.html",[3,0.128,4,0.113,5,0.113,7,0.351,8,1.122,11,0.018,12,1.394,14,1.764,15,1.294,16,0.757,17,0.508,20,0.128,21,0.04,23,0.779,24,1.7,26,0.009,27,0.009,56,1.656,57,4.114,60,0.817,69,0.975,70,1.097,83,1.776,84,1.404,85,0.9,86,1.616,162,1.952,163,1.373,181,1.684,188,2.007,223,2.962,228,1.462,230,1.097,254,1.424,255,2.475,256,1.844,257,1.844,258,1.844,263,1.844,266,2.343,267,1.844,270,1.844,278,1.293,279,2.362,280,1.222,314,2.845,315,3.16,332,1.462,342,1.828,356,2.007,361,3.393,366,4.114,369,2.362,379,2.248,380,2.248,381,4.553,382,2.613,383,2.613,384,3.944,385,2.613,386,2.613,387,2.613,388,2.613,389,2.613,390,2.613,391,2.613,392,2.613,393,2.613,394,2.007,395,2.248,396,2.613,397,2.613,398,2.613]],["title/controllers/FaqController.html",[0,1.347,399,2.61]],["body/controllers/FaqController.html",[0,1.041,2,1.041,3,0.141,4,0.125,5,0.125,7,0.387,8,1.208,10,2.622,11,0.018,12,1.331,14,1.685,15,1.304,16,0.704,17,0.56,20,0.141,21,0.044,22,1.726,23,0.86,24,1.685,26,0.01,27,0.01,56,1.211,83,1.737,84,1.373,85,0.88,86,1.581,111,1.726,139,2.375,141,3.016,254,1.532,255,2.598,256,1.985,257,1.985,258,1.985,263,1.348,264,2.735,266,2.742,267,1.348,268,2.735,270,1.348,272,2.016,274,1.858,275,1.858,278,1.427,280,1.348,282,1.858,285,1.858,287,1.858,289,1.858,319,3.709,367,3.26,370,2.48,399,2.968,400,2.48,401,2.48,402,2.883,403,2.883,404,2.883,405,2.883,406,4.235,407,2.883,408,3.016,409,2.48,410,3.26,411,2.883,412,2.883,413,2.883,414,2.883,415,2.883]],["title/modules/FaqModule.html",[28,1.223,43,2.405]],["body/modules/FaqModule.html",[2,1.869,3,0.187,4,0.166,5,0.166,11,0.018,16,0.86,17,0.742,20,0.187,21,0.058,26,0.012,27,0.012,28,1.926,30,1.785,31,1.785,32,2.006,33,2.006,34,1.785,35,3.087,36,2.006,43,4.376,46,2.72,47,2.006,48,2.006,50,2.286,56,2.174,59,2.286,60,1.193,84,1.28,166,2.421,215,2.46,332,2.137,341,2.286,342,2.67,347,2.933,349,3.621,357,3.337,399,4.109,408,4.065,409,3.284,416,3.284,417,3.284,418,3.818,419,3.818,420,3.284,421,3.818]],["title/injectables/FaqService.html",[69,0.922,408,2.234]],["body/injectables/FaqService.html",[3,0.143,4,0.127,5,0.127,7,0.393,8,1.221,11,0.018,12,1.4,14,1.695,15,1.309,16,0.755,17,0.569,20,0.143,21,0.044,23,0.873,24,1.695,26,0.01,27,0.01,56,1.229,60,0.915,69,1.061,70,1.229,83,1.863,84,1.473,85,0.944,86,1.695,162,2.124,163,1.537,181,1.886,223,3.132,228,1.638,230,1.229,254,1.549,255,2.616,256,2.006,257,2.006,258,2.006,263,2.006,266,2.477,267,2.006,270,2.006,280,1.368,319,2.569,348,2.248,401,3.691,406,4.253,408,2.569,410,2.248,420,2.517,422,2.517,423,2.926,424,2.926,425,4.291,426,2.926,427,2.926,428,2.926,429,2.926,430,2.926,431,2.926,432,2.926,433,2.926,434,2.926,435,2.926,436,2.926,437,2.926]],["title/interfaces/IErrorBody.html",[438,1.415,439,2.234]],["body/interfaces/IErrorBody.html",[3,0.151,4,0.134,5,0.134,7,0.415,11,0.018,15,1.442,20,0.311,23,2.212,26,0.011,27,0.011,85,1.144,86,1.907,168,1.613,438,2.178,439,2.675,440,1.731,441,1.852,442,4.017,443,4.017,444,3.439,445,4.017,446,4.319,447,4.319,448,1.852,449,2.163,450,2.163,451,2.163,452,2.163,453,2.163,454,2.163,455,2.163,456,2.163,457,2.163,458,2.5,459,1.993,460,3.124,461,2.5,462,2.163,463,1.852]],["title/interfaces/ItemsBody.html",[438,1.415,461,2.088]],["body/interfaces/ItemsBody.html",[3,0.175,4,0.155,5,0.155,7,0.481,11,0.018,15,1.404,20,0.326,23,2.25,26,0.012,27,0.012,85,1.055,168,1.789,438,2.325,439,2.144,440,2.003,441,2.144,442,2.504,443,2.504,444,2.144,445,2.504,446,3.662,447,4.291,448,2.144,449,2.504,450,2.504,451,2.504,452,2.504,453,2.504,454,2.504,455,2.504,456,2.504,457,2.504,458,2.773,459,2.307,460,4.288,461,3.179,462,4.288,463,2.144]],["title/classes/JwtStorage.html",[21,0.057,464,2.61]],["body/classes/JwtStorage.html",[3,0.125,4,0.111,5,0.111,7,0.343,8,1.102,11,0.018,12,1.264,14,1.102,15,1.196,16,0.75,17,0.496,20,0.125,21,0.039,23,1.974,24,1.102,26,0.009,27,0.009,60,0.798,81,1.469,83,1.464,84,1.158,85,0.938,86,1.333,99,1.785,100,1.428,102,2.497,112,3.333,113,3.815,124,1.785,140,1.96,147,2.621,162,1.918,163,3.33,168,1.399,176,1.263,177,1.785,205,1.785,211,5.291,212,1.96,222,1.785,223,2.926,225,2.71,228,1.428,229,1.528,230,1.071,232,1.785,237,0.798,266,1.13,438,0.968,464,2.71,465,2.195,466,3.333,467,5.919,468,4.683,469,4.683,470,3.333,471,4.683,472,3.333,473,3.874,474,2.976,475,3.333,476,3.333,477,3.874,478,2.552,479,3.874,480,2.552,481,3.874,482,2.552,483,2.976,484,2.552,485,3.874,486,2.552,487,2.552,488,2.552,489,2.552,490,2.552,491,2.552,492,2.195,493,2.552,494,2.552,495,2.552,496,2.552,497,2.552,498,2.195,499,2.552]],["title/injectables/JwtStrategy.html",[69,0.922,201,2.405]],["body/injectables/JwtStrategy.html",[3,0.193,4,0.171,5,0.171,7,0.529,8,1.505,11,0.018,12,1.189,14,1.121,16,0.757,17,0.766,20,0.193,21,0.06,24,1.121,26,0.013,27,0.013,68,2.205,69,1.307,70,1.655,77,2.11,83,1.232,84,0.974,85,0.624,86,1.121,95,2.205,113,3.848,124,2.756,162,2.955,179,2.756,181,2.54,183,2.54,185,2.54,201,3.409,219,3.027,492,3.39,500,3.39,501,4.55,502,4.55,503,3.941,504,5.289,505,3.941,506,3.941,507,3.39,508,3.941,509,3.39,510,3.027,511,3.39,512,3.941,513,3.941,514,3.941,515,3.941,516,3.941,517,3.941,518,3.941,519,3.941]],["title/classes/LocalStrategy.html",[21,0.057,206,2.61]],["body/classes/LocalStrategy.html",[3,0.159,4,0.141,5,0.141,7,0.436,8,1.316,11,0.018,12,1.04,14,0.924,15,1.254,16,0.841,17,0.631,20,0.159,21,0.049,23,0.968,24,0.924,26,0.011,27,0.011,60,1.015,77,1.845,81,2.228,83,1.446,84,1.143,85,0.733,86,1.316,93,2.494,95,1.817,99,3.235,100,2.589,113,3.473,162,2.29,163,1.706,169,3.553,170,3.785,176,1.607,177,3.235,179,3.235,205,2.271,206,3.235,222,2.271,223,3.287,225,3.235,228,1.817,229,1.944,230,1.363,231,3.553,232,2.271,237,1.015,483,3.553,498,2.793,501,3.979,502,3.979,507,2.793,509,2.793,510,2.494,511,2.793,520,2.793,521,3.247,522,4.626,523,3.247,524,2.793,525,3.247,526,4.626,527,4.626,528,3.247,529,3.247,530,3.247]],["title/interfaces/PaginationMetaInterface.html",[438,1.415,448,2.234]],["body/interfaces/PaginationMetaInterface.html",[3,0.142,4,0.126,5,0.126,7,0.39,11,0.018,15,1.43,20,0.304,23,2.193,26,0.01,27,0.01,85,1.131,86,1.873,168,1.539,438,2.113,439,1.737,440,1.623,441,1.737,442,2.028,443,2.028,444,1.737,445,2.028,446,3.258,447,4.666,448,2.553,449,3.897,450,3.897,451,3.897,452,3.897,453,3.897,454,3.897,455,3.897,456,3.897,457,3.897,458,2.386,459,1.869,460,2.981,461,2.386,462,2.028,463,1.737]],["title/classes/Question.html",[21,0.057,330,2.234]],["body/classes/Question.html",[3,0.275,4,0.244,5,0.244,11,0.017,20,0.275,21,0.085,26,0.016,27,0.016,237,1.756,330,3.96,531,4.832]],["title/controllers/QuestionController.html",[0,1.347,532,2.61]],["body/controllers/QuestionController.html",[0,1.041,2,1.041,3,0.141,4,0.125,5,0.125,7,0.387,8,1.208,10,2.622,11,0.018,12,1.331,14,1.685,15,1.304,16,0.704,17,0.56,20,0.141,21,0.044,22,1.726,23,0.86,24,1.685,26,0.01,27,0.01,83,1.737,84,1.373,85,0.88,86,1.581,111,1.726,139,2.375,141,3.016,254,1.532,255,2.598,256,1.985,257,1.985,258,1.985,263,1.348,264,2.735,266,2.742,267,1.348,268,2.735,270,1.348,274,1.858,275,1.858,278,1.427,280,1.348,282,1.858,285,1.858,287,1.858,289,1.858,322,3.709,330,1.726,532,2.968,533,2.48,534,2.48,535,2.883,536,2.883,537,2.883,538,2.883,539,4.235,540,4.244,541,2.883,542,2.883,543,3.016,544,2.48,545,3.26,546,2.883,547,2.883,548,2.883,549,2.883,550,2.883,551,2.883]],["title/modules/QuestionModule.html",[28,1.223,44,2.234]],["body/modules/QuestionModule.html",[2,2.002,3,0.207,4,0.183,5,0.183,11,0.018,16,0.784,17,0.822,20,0.207,21,0.064,26,0.013,27,0.013,28,2.027,30,1.978,31,1.978,32,2.223,33,2.223,34,1.978,35,3.249,36,3.249,44,4.266,46,2.913,47,2.223,48,2.223,532,4.325,543,4.479,544,3.639,552,3.639,553,3.639,554,3.639,555,4.231,556,4.231]],["title/injectables/QuestionService.html",[69,0.922,543,2.234]],["body/injectables/QuestionService.html",[3,0.151,4,0.134,5,0.134,7,0.414,8,1.268,11,0.018,12,1.368,14,1.861,15,1.402,16,0.663,17,0.599,20,0.151,21,0.047,24,1.731,26,0.011,27,0.011,69,1.102,70,1.295,83,1.793,84,1.418,85,0.909,86,1.632,100,1.725,254,1.609,255,2.682,256,2.084,257,2.084,258,2.084,263,2.084,266,2.807,267,2.084,270,2.084,278,1.526,280,1.442,322,3.643,330,3.434,394,4.674,534,3.834,539,4.214,543,2.669,545,3.424,557,2.652,558,3.083,559,3.083,560,3.083,561,3.083,562,3.083,563,3.083,564,3.083,565,3.083,566,3.083]],["title/interfaces/ResourceBody.html",[438,1.415,458,2.088]],["body/interfaces/ResourceBody.html",[3,0.175,4,0.155,5,0.155,7,0.481,11,0.018,15,1.404,20,0.326,23,2.25,26,0.012,27,0.012,85,1.055,168,1.789,438,2.325,439,2.144,440,2.003,441,2.144,442,2.504,443,2.504,444,2.144,445,2.504,446,3.662,447,4.291,448,2.144,449,2.504,450,2.504,451,2.504,452,2.504,453,2.504,454,2.504,455,2.504,456,2.504,457,2.504,458,3.179,459,3.951,460,4.288,461,2.773,462,2.504,463,2.144]],["title/injectables/ResponseTransformInterceptor.html",[69,0.922,567,2.866]],["body/injectables/ResponseTransformInterceptor.html",[3,0.147,4,0.13,5,0.13,7,0.404,8,1.246,11,0.018,12,0.676,14,0.856,15,0.585,16,0.797,17,0.585,20,0.214,21,0.046,24,1.789,26,0.01,27,0.01,68,1.683,69,1.082,70,1.263,83,0.94,84,0.743,85,0.477,86,0.856,89,4.355,96,3.965,97,2.103,100,1.683,101,2.103,106,2.31,152,3.061,176,2.555,334,3.765,459,3.654,463,2.621,466,2.587,567,3.362,568,3.061,569,2.103,570,5.161,571,3.007,572,5.161,573,5.669,574,3.007,575,4.377,576,4.377,577,3.007,578,3.007,579,3.007,580,2.31,581,3.007,582,3.007,583,2.587,584,2.31,585,2.587,586,3.362,587,2.31,588,3.007,589,3.007,590,3.007,591,3.007,592,3.007,593,5.161,594,3.007,595,3.007,596,4.377,597,3.007,598,3.007,599,3.007,600,3.007,601,3.007,602,3.007,603,3.007,604,3.007]],["title/interfaces/SignUpDTO.html",[136,2.61,438,1.415]],["body/interfaces/SignUpDTO.html",[3,0.226,4,0.2,5,0.2,7,0.619,11,0.017,15,1.464,20,0.226,26,0.014,27,0.014,85,1.074,136,4.099,168,2.116,169,5.208,170,4.369,183,4.369,185,4.152,438,1.748,440,2.58,605,3.966,606,4.61]],["title/injectables/TokenGuard.html",[69,0.922,98,2.405]],["body/injectables/TokenGuard.html",[3,0.328,4,0.158,5,0.158,7,0.49,8,1.428,11,0.018,12,0.82,14,1.038,16,0.727,17,0.709,20,0.246,21,0.076,24,1.428,26,0.012,27,0.012,69,1.418,70,1.531,75,2.551,76,2.801,77,2.288,78,4.935,79,4.316,80,4.935,81,2.602,83,1.14,84,0.901,85,0.578,86,1.038,87,4.935,88,3.137,89,2.801,90,3.137,91,4.316,92,3.137,93,3.854,94,2.801,95,2.041,96,2.801,97,2.551,98,3.234,99,3.509,100,2.808,101,2.551,102,2.35,103,3.137,104,3.137,105,3.137,106,2.801,107,3.137,108,3.137,607,3.647]],["title/interfaces/TokenStorage.html",[147,2.088,438,1.415]],["body/interfaces/TokenStorage.html",[3,0.236,4,0.209,5,0.209,7,0.647,11,0.018,15,0.936,20,0.236,23,1.796,26,0.014,27,0.014,81,1.826,85,0.954,102,3.103,147,3.371,168,2.174,438,1.826,440,2.694,470,5.924,472,5.924,483,4.626,586,5.29,608,4.141]],["title/classes/UpdateCategoryDto.html",[21,0.057,271,2.405]],["body/classes/UpdateCategoryDto.html",[3,0.252,4,0.223,5,0.223,11,0.018,16,0.795,20,0.252,21,0.078,26,0.015,27,0.015,77,2.502,158,2.703,237,1.608,254,1.857,260,3.08,271,4.044,279,3.08,313,3.315,609,4.425,610,6.274,611,3.315]],["title/classes/UpdateFaqCategoryDto.html",[21,0.057,366,2.405]],["body/classes/UpdateFaqCategoryDto.html",[3,0.248,4,0.22,5,0.22,11,0.018,16,0.787,20,0.248,21,0.077,26,0.015,27,0.015,56,2.609,77,2.478,158,2.661,237,1.583,254,1.828,279,3.032,313,3.264,314,3.032,315,2.506,366,4.005,611,3.264,612,4.356,613,6.214]],["title/classes/UpdateFaqDto.html",[21,0.057,406,2.405]],["body/classes/UpdateFaqDto.html",[3,0.252,4,0.223,5,0.223,11,0.018,16,0.795,20,0.252,21,0.078,26,0.015,27,0.015,77,2.502,158,2.703,237,1.608,254,1.857,319,3.08,321,3.951,406,4.044,410,3.951,611,3.315,614,4.425,615,6.274]],["title/classes/UpdateQuestionDto.html",[21,0.057,539,2.405]],["body/classes/UpdateQuestionDto.html",[3,0.252,4,0.223,5,0.223,11,0.018,16,0.795,20,0.252,21,0.078,26,0.015,27,0.015,77,2.502,158,2.703,237,1.608,254,1.857,322,3.08,324,3.951,539,4.044,545,3.951,611,3.315,616,4.425,617,6.274]],["title/classes/UpdateUserDto.html",[21,0.057,618,2.405]],["body/classes/UpdateUserDto.html",[3,0.252,4,0.223,5,0.223,11,0.018,16,0.795,20,0.252,21,0.078,26,0.015,27,0.015,77,2.502,158,2.703,237,1.608,254,1.857,325,3.08,327,3.951,611,3.315,618,4.044,619,4.425,620,6.274,621,3.951]],["title/classes/User.html",[21,0.057,81,1.415]],["body/classes/User.html",[3,0.15,4,0.133,5,0.133,7,0.413,10,2.69,11,0.018,12,1.366,15,1.39,16,0.662,20,0.256,21,0.067,26,0.011,27,0.011,60,0.961,68,3.205,77,1.226,81,1.982,85,1.097,166,2.079,168,1.606,170,3.368,171,2.663,176,1.521,179,3.655,183,3.368,185,3.368,204,1.981,229,1.84,230,1.29,237,0.961,240,4.569,242,2.149,243,3.655,244,2.149,245,2.149,247,2.149,248,3.11,333,4.926,344,2.361,345,2.361,444,3.129,447,3.691,474,3.416,622,2.149,623,3.073,624,3.073,625,3.073,626,3.073,627,3.073,628,4.447,629,4.447,630,3.825,631,3.073,632,4.447,633,3.073,634,2.644]],["title/controllers/UserController.html",[0,1.347,635,2.61]],["body/controllers/UserController.html",[0,1.032,2,1.032,3,0.14,4,0.124,5,0.124,7,0.384,8,1.2,10,2.612,11,0.018,12,1.327,14,1.679,15,1.301,16,0.748,17,0.556,20,0.14,21,0.043,22,1.711,23,0.852,24,1.679,26,0.01,27,0.01,81,1.084,83,1.73,84,1.367,85,0.877,86,1.574,111,1.711,139,2.36,141,3.001,150,2.633,157,2.458,158,1.501,254,1.522,255,2.587,256,1.972,257,1.972,258,1.972,263,1.336,264,2.718,266,2.733,267,1.336,268,2.718,270,1.336,272,1.999,274,1.842,275,1.842,278,1.414,280,1.336,282,1.842,285,1.842,287,1.842,289,1.842,325,3.001,367,3.239,618,4.225,621,3.239,635,2.949,636,2.458,637,2.458,638,2.858,639,2.858,640,2.858,641,2.858,642,2.858,643,2.458,644,2.858,645,2.858,646,2.858,647,2.858,648,2.858,649,2.858,650,2.858]],["title/modules/UserModule.html",[28,1.223,45,2.234]],["body/modules/UserModule.html",[2,1.874,3,0.188,4,0.166,5,0.166,11,0.018,16,0.861,17,0.745,20,0.188,21,0.058,26,0.012,27,0.012,28,1.93,30,1.792,31,1.792,32,2.014,33,2.014,34,1.792,35,3.093,36,2.014,44,4.07,45,4.234,46,2.727,47,2.014,48,2.014,50,3.108,54,3.297,59,2.295,60,1.198,81,1.454,84,0.947,150,3.571,166,1.792,204,3.346,215,2.47,216,3.297,635,4.117,643,3.297,651,3.833,652,3.833,653,3.833,654,3.833,655,3.833,656,3.297]],["title/injectables/UserService.html",[69,0.922,150,1.96]],["body/injectables/UserService.html",[3,0.134,4,0.119,5,0.119,7,0.368,8,1.162,11,0.018,12,1.416,14,1.792,15,1.224,16,0.77,17,0.532,20,0.134,21,0.041,23,0.816,24,1.73,26,0.01,27,0.01,60,0.856,69,1.01,70,1.149,81,1.038,83,1.812,84,1.433,85,0.918,86,1.649,150,2.146,162,2.022,163,1.438,181,1.764,183,1.764,185,1.764,188,2.103,222,1.915,223,3.032,225,2.857,228,1.532,229,1.639,230,1.149,232,1.915,235,2.355,254,1.475,255,2.533,256,1.91,257,1.91,258,1.91,263,1.91,266,2.398,267,1.91,270,1.91,278,1.355,280,1.28,325,2.446,381,4.66,394,2.103,395,2.355,444,1.639,618,4.172,621,3.138,637,3.514,656,2.355,657,2.355,658,2.738,659,2.738,660,2.738,661,2.738,662,2.738,663,2.738,664,2.738,665,2.738,666,2.738,667,2.738,668,2.738,669,2.738,670,2.738,671,2.738]],["title/coverage.html",[672,3.916]],["body/coverage.html",[0,1.991,1,1.338,5,0.083,6,1.645,11,0.018,18,1.145,21,0.102,26,0.007,27,0.007,28,0.627,34,0.894,56,1.633,57,1.992,69,1.539,71,1.645,75,1.338,76,2.374,81,0.725,85,0.303,98,1.233,100,1.07,109,1.338,110,1.645,136,1.338,145,1.145,147,1.07,150,1.005,152,1.338,201,1.233,204,1.233,206,1.338,208,1.469,220,1.645,236,1.005,238,2.161,250,1.338,252,1.338,253,1.645,260,1.145,271,1.233,276,1.145,297,1.645,312,1.645,313,2.877,314,1.145,315,2.594,316,1.645,319,1.145,320,1.645,321,2.374,322,1.145,323,1.645,324,2.374,325,1.145,326,1.645,327,2.374,328,2.161,330,1.145,332,1.07,341,1.85,349,1.338,351,2.161,357,1.233,359,1.338,360,1.645,366,1.233,369,1.145,380,1.645,399,1.338,400,1.645,406,1.233,408,1.145,422,1.645,438,1.988,439,1.145,441,2.673,448,1.145,458,1.07,461,1.07,464,1.338,465,1.645,500,1.645,520,1.645,531,1.645,532,1.338,533,1.645,539,1.233,543,1.145,557,1.645,567,1.469,568,2.719,569,2.719,580,1.469,584,1.469,586,2.374,587,1.469,605,1.645,608,1.645,609,1.645,612,1.645,614,1.645,616,1.645,618,1.233,619,1.645,622,2.161,630,6.516,635,1.338,636,1.645,657,1.645,672,1.469,673,1.913,674,1.913,675,1.913,676,5.741,677,3.09,678,5.242,679,1.913,680,1.645,681,1.645,682,5.93,683,6.976,684,5.741,685,3.888,686,2.658,687,1.913,688,3.09,689,2.374,690,1.913,691,1.913]],["title/dependencies.html",[31,2.099,692,2.678]],["body/dependencies.html",[11,0.018,17,0.785,21,0.081,26,0.013,27,0.013,31,1.888,60,1.263,95,2.26,97,2.825,158,2.122,212,3.102,219,3.102,230,1.696,231,3.102,343,3.474,344,4.13,510,4.643,524,3.474,583,3.474,693,4.038,694,6.044,695,4.038,696,4.038,697,4.038,698,4.038,699,4.038,700,5.377,701,4.038,702,4.038,703,5.377,704,4.038,705,4.038,706,4.038,707,4.038,708,4.038,709,4.038,710,4.038,711,4.038,712,4.038,713,4.038,714,4.038,715,4.038,716,4.038,717,4.038,718,4.038,719,4.038,720,4.038,721,4.038,722,4.038,723,4.038]],["title/miscellaneous/functions.html",[724,1.864,725,3.862]],["body/miscellaneous/functions.html",[7,0.733,11,0.015,26,0.015,27,0.015,34,3.248,568,3.819,569,4.549,587,5.336,689,4.194,724,3.269,725,4.697,726,4.697,727,4.697]],["title/index.html",[7,0.418,728,3.114,729,3.114]],["body/index.html",[4,0.164,11,0.018,26,0.012,27,0.012,171,2.26,672,2.899,730,3.773,731,3.773,732,5.136,733,3.773,734,3.773,735,3.773,736,3.773,737,3.773,738,3.773,739,5.839,740,3.773,741,3.773,742,3.773,743,3.773,744,5.839,745,6.922,746,3.773,747,3.773,748,3.773,749,6.766,750,3.773,751,3.773,752,5.136,753,3.773,754,3.773,755,3.773,756,3.773,757,5.136,758,5.136,759,3.773,760,3.773,761,3.773,762,5.136,763,5.136,764,3.773,765,3.773,766,3.773,767,3.773,768,3.773,769,3.246,770,3.773,771,3.773,772,3.773,773,3.773,774,3.773,775,3.773,776,3.773,777,3.773,778,3.773,779,3.773,780,3.246,781,3.773,782,3.773,783,3.773,784,3.773,785,3.773,786,3.773,787,3.246]],["title/modules.html",[30,2.383]],["body/modules.html",[11,0.014,26,0.014,27,0.014,29,3.418,30,2.285,40,3.149,41,3.149,42,3.149,43,3.149,44,2.926,45,2.926,769,6.333,788,7.362,789,7.362,790,7.362]],["title/overview.html",[791,4.385]],["body/overview.html",[2,1.161,11,0.018,18,3.209,26,0.011,27,0.011,28,1.054,29,5.142,30,1.503,31,1.503,32,1.689,33,1.689,34,1.503,35,1.689,36,1.689,37,2.765,38,2.765,39,2.765,40,4.56,41,3.986,42,3.986,43,3.986,44,3.965,45,4.054,46,2.413,47,1.689,48,1.689,70,1.35,145,3.209,150,3.072,198,2.765,199,2.765,201,3.454,237,1.005,276,3.209,291,2.765,292,2.765,369,3.209,376,2.765,377,2.765,408,3.209,416,2.765,417,2.765,440,1.799,476,3.951,543,3.965,552,2.765,553,2.765,554,2.765,791,2.765,792,3.215,793,3.215,794,3.215]],["title/properties.html",[168,1.621,692,2.678]],["body/properties.html",[11,0.018,26,0.016,27,0.016,168,2.016,171,3.344,780,4.804,787,4.804,795,5.584,796,5.584,797,5.584]],["title/miscellaneous/typealiases.html",[724,1.864,798,4.489]],["body/miscellaneous/typealiases.html",[7,0.66,11,0.016,26,0.014,27,0.014,85,0.966,229,3.651,238,3.435,249,4.684,315,2.431,328,3.435,341,2.941,348,4.684,351,4.265,356,4.684,441,2.941,446,3.93,458,2.748,461,2.748,463,3.651,622,3.435,724,2.941,799,4.911,800,4.225,801,4.225,802,4.225,803,6.098,804,4.225,805,4.911]],["title/miscellaneous/variables.html",[724,1.864,806,3.862]],["body/miscellaneous/variables.html",[7,0.513,11,0.018,15,1.006,26,0.012,27,0.012,28,1.697,85,0.82,101,3.621,147,2.137,152,3.621,204,3.337,208,3.977,238,2.67,250,3.621,251,3.284,315,1.89,328,2.67,341,2.286,349,3.621,350,3.284,351,3.621,357,3.337,358,3.284,464,2.67,474,5.426,475,6.077,568,2.67,569,3.621,580,4.513,584,3.977,585,3.284,622,2.67,634,3.284,680,3.284,681,4.454,686,3.284,689,2.933,724,2.286,726,3.284,727,3.284,800,3.284,801,3.284,802,3.284,804,3.284,806,3.284,807,5.177,808,3.818,809,3.818,810,3.818,811,3.818,812,3.818]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuthCheckGuard.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateFaqCategoryDto.html":{},"classes/CreateFaqDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateUserDto.html":{},"classes/Faq.html":{},"classes/FaqCategory.html":{},"controllers/FaqCategoryController.html":{},"modules/FaqCategoryModule.html":{},"injectables/FaqCategoryService.html":{},"controllers/FaqController.html":{},"modules/FaqModule.html":{},"injectables/FaqService.html":{},"interfaces/IErrorBody.html":{},"interfaces/ItemsBody.html":{},"classes/JwtStorage.html":{},"injectables/JwtStrategy.html":{},"classes/LocalStrategy.html":{},"interfaces/PaginationMetaInterface.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"modules/QuestionModule.html":{},"injectables/QuestionService.html":{},"interfaces/ResourceBody.html":{},"injectables/ResponseTransformInterceptor.html":{},"interfaces/SignUpDTO.html":{},"injectables/TokenGuard.html":{},"interfaces/TokenStorage.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateFaqCategoryDto.html":{},"classes/UpdateFaqDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":630,"title":{},"body":{"classes/User.html":{},"coverage.html":{}}}],["0.0.1",{"_index":796,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":722,"title":{},"body":{"dependencies.html":{}}}],["0.14.0",{"_index":711,"title":{},"body":{"dependencies.html":{}}}],["0.4.0",{"_index":693,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":709,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":717,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":683,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":687,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":676,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":678,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":677,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":679,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":684,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":685,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":688,"title":{},"body":{"coverage.html":{}}}],["0:deleted",{"_index":628,"title":{},"body":{"classes/User.html":{}}}],["1.0.0",{"_index":719,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":234,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["10.0.0",{"_index":694,"title":{},"body":{"dependencies.html":{}}}],["10.0.1",{"_index":698,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":699,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":697,"title":{},"body":{"dependencies.html":{}}}],["10.2.8",{"_index":703,"title":{},"body":{"dependencies.html":{}}}],["11",{"_index":792,"title":{},"body":{"overview.html":{}}}],["17",{"_index":793,"title":{},"body":{"overview.html":{}}}],["1:active",{"_index":629,"title":{},"body":{"classes/User.html":{}}}],["2.29.4",{"_index":713,"title":{},"body":{"dependencies.html":{}}}],["3.1.1",{"_index":696,"title":{},"body":{"dependencies.html":{}}}],["4.0.1",{"_index":718,"title":{},"body":{"dependencies.html":{}}}],["403",{"_index":107,"title":{},"body":{"injectables/AuthCheckGuard.html":{},"injectables/TokenGuard.html":{}}}],["5.0.1",{"_index":707,"title":{},"body":{"dependencies.html":{}}}],["5.1.1",{"_index":708,"title":{},"body":{"dependencies.html":{}}}],["6",{"_index":794,"title":{},"body":{"overview.html":{}}}],["6.2.0",{"_index":715,"title":{},"body":{"dependencies.html":{}}}],["7",{"_index":476,"title":{},"body":{"classes/JwtStorage.html":{},"overview.html":{}}}],["7.1.14",{"_index":704,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":723,"title":{},"body":{"dependencies.html":{}}}],["8.0.0",{"_index":716,"title":{},"body":{"dependencies.html":{}}}],["_id",{"_index":181,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/FaqCategoryService.html":{},"injectables/FaqService.html":{},"injectables/JwtStrategy.html":{},"injectables/UserService.html":{}}}],["action",{"_index":394,"title":{},"body":{"injectables/FaqCategoryService.html":{},"injectables/QuestionService.html":{},"injectables/UserService.html":{}}}],["adds",{"_index":563,"title":{},"body":{"injectables/QuestionService.html":{}}}],["aliases",{"_index":799,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["amazing",{"_index":770,"title":{},"body":{"index.html":{}}}],["answer",{"_index":329,"title":{},"body":{"classes/Faq.html":{}}}],["api",{"_index":131,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["apibody",{"_index":154,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["apiokresponse",{"_index":155,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["apiresponse",{"_index":156,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["apitags",{"_index":157,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/UserController.html":{}}}],["apitags(\"user",{"_index":644,"title":{},"body":{"controllers/UserController.html":{}}}],["apitags('authentication",{"_index":160,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["app",{"_index":747,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":738,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":29,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":18,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["async",{"_index":113,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/JwtStorage.html":{},"injectables/JwtStrategy.html":{},"classes/LocalStrategy.html":{}}}],["authcheckguard",{"_index":75,"title":{"injectables/AuthCheckGuard.html":{}},"body":{"injectables/AuthCheckGuard.html":{},"injectables/TokenGuard.html":{},"coverage.html":{}}}],["authentication",{"_index":112,"title":{},"body":{"controllers/AuthenticationController.html":{},"classes/JwtStorage.html":{}}}],["authentication.controller",{"_index":203,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["authentication.service",{"_index":146,"title":{},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{}}}],["authentication/authentication.module",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["authenticationcontroller",{"_index":109,"title":{"controllers/AuthenticationController.html":{}},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"coverage.html":{}}}],["authenticationmodule",{"_index":40,"title":{"modules/AuthenticationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules.html":{},"overview.html":{}}}],["authenticationservice",{"_index":145,"title":{"injectables/AuthenticationService.html":{}},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"coverage.html":{},"overview.html":{}}}],["authguard",{"_index":94,"title":{},"body":{"injectables/AuthCheckGuard.html":{},"controllers/AuthenticationController.html":{},"injectables/TokenGuard.html":{}}}],["authguard('jwt",{"_index":78,"title":{},"body":{"injectables/AuthCheckGuard.html":{},"injectables/TokenGuard.html":{}}}],["author",{"_index":780,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":164,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["autocreate",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["await",{"_index":177,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/JwtStorage.html":{},"classes/LocalStrategy.html":{}}}],["backers",{"_index":771,"title":{},"body":{"index.html":{}}}],["bcrypt",{"_index":231,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/LocalStrategy.html":{},"dependencies.html":{}}}],["bcrypt.compare",{"_index":528,"title":{},"body":{"classes/LocalStrategy.html":{}}}],["bcrypt.hash(body.password",{"_index":233,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["body",{"_index":139,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/CategoryController.html":{},"controllers/FaqCategoryController.html":{},"controllers/FaqController.html":{},"controllers/QuestionController.html":{},"controllers/UserController.html":{}}}],["bootstrap",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CategoryModule.html":{},"modules/FaqCategoryModule.html":{},"modules/FaqModule.html":{},"modules/QuestionModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":790,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":788,"title":{},"body":{"modules.html":{}}}],["building",{"_index":733,"title":{},"body":{"index.html":{}}}],["callhandler",{"_index":573,"title":{},"body":{"injectables/ResponseTransformInterceptor.html":{}}}],["canactivate",{"_index":88,"title":{},"body":{"injectables/AuthCheckGuard.html":{},"injectables/TokenGuard.html":{}}}],["category",{"_index":236,"title":{"classes/Category.html":{}},"body":{"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/Faq.html":{},"controllers/FaqCategoryController.html":{},"coverage.html":{}}}],["category.controller",{"_index":294,"title":{},"body":{"modules/CategoryModule.html":{},"modules/FaqCategoryModule.html":{}}}],["category.controller.ts",{"_index":360,"title":{},"body":{"controllers/FaqCategoryController.html":{},"coverage.html":{}}}],["category.controller.ts:11",{"_index":362,"title":{},"body":{"controllers/FaqCategoryController.html":{}}}],["category.controller.ts:16",{"_index":363,"title":{},"body":{"controllers/FaqCategoryController.html":{}}}],["category.controller.ts:21",{"_index":364,"title":{},"body":{"controllers/FaqCategoryController.html":{}}}],["category.controller.ts:26",{"_index":368,"title":{},"body":{"controllers/FaqCategoryController.html":{}}}],["category.controller.ts:31",{"_index":365,"title":{},"body":{"controllers/FaqCategoryController.html":{}}}],["category.dto",{"_index":279,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/FaqCategoryController.html":{},"injectables/FaqCategoryService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateFaqCategoryDto.html":{}}}],["category.dto.ts",{"_index":313,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateFaqCategoryDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateFaqCategoryDto.html":{},"coverage.html":{}}}],["category.dto.ts:2",{"_index":318,"title":{},"body":{"classes/CreateFaqCategoryDto.html":{}}}],["category.dto.ts:3",{"_index":317,"title":{},"body":{"classes/CreateFaqCategoryDto.html":{}}}],["category.entity",{"_index":342,"title":{},"body":{"classes/Faq.html":{},"modules/FaqCategoryModule.html":{},"injectables/FaqCategoryService.html":{},"modules/FaqModule.html":{}}}],["category.entity.ts",{"_index":351,"title":{},"body":{"classes/FaqCategory.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["category.entity.ts:13",{"_index":354,"title":{},"body":{"classes/FaqCategory.html":{}}}],["category.entity.ts:18",{"_index":353,"title":{},"body":{"classes/FaqCategory.html":{}}}],["category.module",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["category.module.ts",{"_index":378,"title":{},"body":{"modules/FaqCategoryModule.html":{}}}],["category.name",{"_index":296,"title":{},"body":{"modules/CategoryModule.html":{}}}],["category.service",{"_index":277,"title":{},"body":{"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"controllers/FaqCategoryController.html":{},"modules/FaqCategoryModule.html":{}}}],["category.service.ts",{"_index":380,"title":{},"body":{"injectables/FaqCategoryService.html":{},"coverage.html":{}}}],["category.service.ts:14",{"_index":385,"title":{},"body":{"injectables/FaqCategoryService.html":{}}}],["category.service.ts:20",{"_index":387,"title":{},"body":{"injectables/FaqCategoryService.html":{}}}],["category.service.ts:24",{"_index":386,"title":{},"body":{"injectables/FaqCategoryService.html":{}}}],["category.service.ts:28",{"_index":388,"title":{},"body":{"injectables/FaqCategoryService.html":{}}}],["category.service.ts:32",{"_index":390,"title":{},"body":{"injectables/FaqCategoryService.html":{}}}],["category.service.ts:38",{"_index":389,"title":{},"body":{"injectables/FaqCategoryService.html":{}}}],["category.service.ts:9",{"_index":383,"title":{},"body":{"injectables/FaqCategoryService.html":{}}}],["category/category.module",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["category/dto/create",{"_index":316,"title":{},"body":{"classes/CreateFaqCategoryDto.html":{},"coverage.html":{}}}],["category/dto/update",{"_index":612,"title":{},"body":{"classes/UpdateFaqCategoryDto.html":{},"coverage.html":{}}}],["category/entities/faq",{"_index":341,"title":{},"body":{"classes/Faq.html":{},"classes/FaqCategory.html":{},"modules/FaqModule.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["category/faq",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"controllers/FaqCategoryController.html":{},"modules/FaqCategoryModule.html":{},"injectables/FaqCategoryService.html":{},"coverage.html":{}}}],["categorycontroller",{"_index":252,"title":{"controllers/CategoryController.html":{}},"body":{"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"coverage.html":{}}}],["categorymodel",{"_index":300,"title":{},"body":{"injectables/CategoryService.html":{}}}],["categorymodule",{"_index":41,"title":{"modules/CategoryModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CategoryModule.html":{},"modules.html":{},"overview.html":{}}}],["categoryschema",{"_index":250,"title":{},"body":{"classes/Category.html":{},"modules/CategoryModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["categoryservice",{"_index":276,"title":{"injectables/CategoryService.html":{}},"body":{"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"coverage.html":{},"overview.html":{}}}],["categorytype",{"_index":249,"title":{},"body":{"classes/Category.html":{},"injectables/CategoryService.html":{},"miscellaneous/typealiases.html":{}}}],["class",{"_index":21,"title":{"classes/Category.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateFaqCategoryDto.html":{},"classes/CreateFaqDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateUserDto.html":{},"classes/Faq.html":{},"classes/FaqCategory.html":{},"classes/JwtStorage.html":{},"classes/LocalStrategy.html":{},"classes/Question.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateFaqCategoryDto.html":{},"classes/UpdateFaqDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuthCheckGuard.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateFaqCategoryDto.html":{},"classes/CreateFaqDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateUserDto.html":{},"classes/Faq.html":{},"classes/FaqCategory.html":{},"controllers/FaqCategoryController.html":{},"modules/FaqCategoryModule.html":{},"injectables/FaqCategoryService.html":{},"controllers/FaqController.html":{},"modules/FaqModule.html":{},"injectables/FaqService.html":{},"classes/JwtStorage.html":{},"injectables/JwtStrategy.html":{},"classes/LocalStrategy.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"modules/QuestionModule.html":{},"injectables/QuestionService.html":{},"injectables/ResponseTransformInterceptor.html":{},"injectables/TokenGuard.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateFaqCategoryDto.html":{},"classes/UpdateFaqDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":237,"title":{},"body":{"classes/Category.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateFaqCategoryDto.html":{},"classes/CreateFaqDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateUserDto.html":{},"classes/Faq.html":{},"classes/FaqCategory.html":{},"classes/JwtStorage.html":{},"classes/LocalStrategy.html":{},"classes/Question.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateFaqCategoryDto.html":{},"classes/UpdateFaqDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authenticationmodule",{"_index":198,"title":{},"body":{"modules/AuthenticationModule.html":{},"overview.html":{}}}],["cluster_authenticationmodule_imports",{"_index":200,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["cluster_authenticationmodule_providers",{"_index":199,"title":{},"body":{"modules/AuthenticationModule.html":{},"overview.html":{}}}],["cluster_categorymodule",{"_index":291,"title":{},"body":{"modules/CategoryModule.html":{},"overview.html":{}}}],["cluster_categorymodule_providers",{"_index":292,"title":{},"body":{"modules/CategoryModule.html":{},"overview.html":{}}}],["cluster_faqcategorymodule",{"_index":376,"title":{},"body":{"modules/FaqCategoryModule.html":{},"overview.html":{}}}],["cluster_faqcategorymodule_providers",{"_index":377,"title":{},"body":{"modules/FaqCategoryModule.html":{},"overview.html":{}}}],["cluster_faqmodule",{"_index":416,"title":{},"body":{"modules/FaqModule.html":{},"overview.html":{}}}],["cluster_faqmodule_providers",{"_index":417,"title":{},"body":{"modules/FaqModule.html":{},"overview.html":{}}}],["cluster_questionmodule",{"_index":552,"title":{},"body":{"modules/QuestionModule.html":{},"overview.html":{}}}],["cluster_questionmodule_exports",{"_index":553,"title":{},"body":{"modules/QuestionModule.html":{},"overview.html":{}}}],["cluster_questionmodule_providers",{"_index":554,"title":{},"body":{"modules/QuestionModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":651,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_imports",{"_index":653,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":652,"title":{},"body":{"modules/UserModule.html":{}}}],["console.log('inside",{"_index":187,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["console.log(req.user",{"_index":175,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["console.log(tokenbody",{"_index":497,"title":{},"body":{"classes/JwtStorage.html":{}}}],["console.log(username",{"_index":525,"title":{},"body":{"classes/LocalStrategy.html":{}}}],["const",{"_index":176,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/Category.html":{},"classes/Faq.html":{},"classes/FaqCategory.html":{},"classes/JwtStorage.html":{},"classes/LocalStrategy.html":{},"injectables/ResponseTransformInterceptor.html":{},"classes/User.html":{}}}],["constructor",{"_index":162,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/CategoryService.html":{},"injectables/FaqCategoryService.html":{},"injectables/FaqService.html":{},"classes/JwtStorage.html":{},"injectables/JwtStrategy.html":{},"classes/LocalStrategy.html":{},"injectables/UserService.html":{}}}],["constructor(categorymodel",{"_index":298,"title":{},"body":{"injectables/CategoryService.html":{}}}],["constructor(faqcategorymodel",{"_index":382,"title":{},"body":{"injectables/FaqCategoryService.html":{}}}],["constructor(faqmodel",{"_index":423,"title":{},"body":{"injectables/FaqService.html":{}}}],["constructor(private",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"controllers/CategoryController.html":{},"controllers/FaqCategoryController.html":{},"controllers/FaqController.html":{},"controllers/QuestionController.html":{},"controllers/UserController.html":{}}}],["constructor(usermodel",{"_index":222,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/JwtStorage.html":{},"classes/LocalStrategy.html":{},"injectables/UserService.html":{}}}],["context",{"_index":575,"title":{},"body":{"injectables/ResponseTransformInterceptor.html":{}}}],["context.gethandler",{"_index":595,"title":{},"body":{"injectables/ResponseTransformInterceptor.html":{}}}],["context.gethandler()[ignoredpropertyname",{"_index":597,"title":{},"body":{"injectables/ResponseTransformInterceptor.html":{}}}],["context.switchtohttp().getrequest().reqid",{"_index":604,"title":{},"body":{"injectables/ResponseTransformInterceptor.html":{}}}],["context.switchtohttp().getresponse().statuscode",{"_index":602,"title":{},"body":{"injectables/ResponseTransformInterceptor.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"controllers/CategoryController.html":{},"controllers/FaqCategoryController.html":{},"controllers/FaqController.html":{},"controllers/QuestionController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"controllers/CategoryController.html":{},"controllers/FaqCategoryController.html":{},"controllers/FaqController.html":{},"controllers/QuestionController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('authentication",{"_index":161,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["controller('category",{"_index":281,"title":{},"body":{"controllers/CategoryController.html":{}}}],["controller('faq",{"_index":370,"title":{},"body":{"controllers/FaqCategoryController.html":{},"controllers/FaqController.html":{}}}],["controller('question",{"_index":546,"title":{},"body":{"controllers/QuestionController.html":{}}}],["controller('user",{"_index":645,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"controllers/FaqCategoryController.html":{},"modules/FaqCategoryModule.html":{},"controllers/FaqController.html":{},"modules/FaqModule.html":{},"controllers/QuestionController.html":{},"modules/QuestionModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["core/decorators/response.decorator",{"_index":153,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["coverage",{"_index":672,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":254,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/FaqCategoryController.html":{},"injectables/FaqCategoryService.html":{},"controllers/FaqController.html":{},"injectables/FaqService.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateFaqCategoryDto.html":{},"classes/UpdateFaqDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["create(@body",{"_index":282,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/FaqCategoryController.html":{},"controllers/FaqController.html":{},"controllers/QuestionController.html":{},"controllers/UserController.html":{}}}],["create(createcategorydto",{"_index":259,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{}}}],["create(createfaqcategorydto",{"_index":361,"title":{},"body":{"controllers/FaqCategoryController.html":{},"injectables/FaqCategoryService.html":{}}}],["create(createfaqdto",{"_index":401,"title":{},"body":{"controllers/FaqController.html":{},"injectables/FaqService.html":{}}}],["create(createquestiondto",{"_index":534,"title":{},"body":{"controllers/QuestionController.html":{},"injectables/QuestionService.html":{}}}],["create(createuserdto",{"_index":637,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["createcategorydto",{"_index":260,"title":{"classes/CreateCategoryDto.html":{}},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["createfaqcategorydto",{"_index":314,"title":{"classes/CreateFaqCategoryDto.html":{}},"body":{"classes/CreateFaqCategoryDto.html":{},"controllers/FaqCategoryController.html":{},"injectables/FaqCategoryService.html":{},"classes/UpdateFaqCategoryDto.html":{},"coverage.html":{}}}],["createfaqdto",{"_index":319,"title":{"classes/CreateFaqDto.html":{}},"body":{"classes/CreateFaqDto.html":{},"controllers/FaqController.html":{},"injectables/FaqService.html":{},"classes/UpdateFaqDto.html":{},"coverage.html":{}}}],["createquestiondto",{"_index":322,"title":{"classes/CreateQuestionDto.html":{}},"body":{"classes/CreateQuestionDto.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"classes/UpdateQuestionDto.html":{},"coverage.html":{}}}],["createuser",{"_index":221,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["createuser(body",{"_index":226,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["createuserdto",{"_index":325,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["createuserdto.firstname",{"_index":665,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto.lastname",{"_index":666,"title":{},"body":{"injectables/UserService.html":{}}}],["createuserdto.status",{"_index":667,"title":{},"body":{"injectables/UserService.html":{}}}],["currentpage",{"_index":453,"title":{},"body":{"interfaces/IErrorBody.html":{},"interfaces/ItemsBody.html":{},"interfaces/PaginationMetaInterface.html":{},"interfaces/ResourceBody.html":{}}}],["custom",{"_index":395,"title":{},"body":{"injectables/FaqCategoryService.html":{},"injectables/UserService.html":{}}}],["custommethod",{"_index":381,"title":{},"body":{"injectables/FaqCategoryService.html":{},"injectables/UserService.html":{}}}],["data",{"_index":459,"title":{},"body":{"interfaces/IErrorBody.html":{},"interfaces/ItemsBody.html":{},"interfaces/PaginationMetaInterface.html":{},"interfaces/ResourceBody.html":{},"injectables/ResponseTransformInterceptor.html":{}}}],["data.hasownproperty('items",{"_index":601,"title":{},"body":{"injectables/ResponseTransformInterceptor.html":{}}}],["days",{"_index":477,"title":{},"body":{"classes/JwtStorage.html":{}}}],["dbname",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["declarations",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CategoryModule.html":{},"modules/FaqCategoryModule.html":{},"modules/FaqModule.html":{},"modules/QuestionModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"classes/Faq.html":{},"classes/FaqCategory.html":{},"controllers/FaqCategoryController.html":{},"controllers/FaqController.html":{},"controllers/QuestionController.html":{},"classes/User.html":{},"controllers/UserController.html":{}}}],["decorators/response.decorator",{"_index":581,"title":{},"body":{"injectables/ResponseTransformInterceptor.html":{}}}],["default",{"_index":474,"title":{},"body":{"classes/JwtStorage.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["defaultstrategy",{"_index":218,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["defined",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthCheckGuard.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateFaqCategoryDto.html":{},"classes/Faq.html":{},"classes/FaqCategory.html":{},"controllers/FaqCategoryController.html":{},"injectables/FaqCategoryService.html":{},"controllers/FaqController.html":{},"injectables/FaqService.html":{},"classes/JwtStorage.html":{},"injectables/JwtStrategy.html":{},"classes/LocalStrategy.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"injectables/ResponseTransformInterceptor.html":{},"injectables/TokenGuard.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["delete",{"_index":275,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/FaqCategoryController.html":{},"controllers/FaqController.html":{},"controllers/QuestionController.html":{},"controllers/UserController.html":{}}}],["delete(':id",{"_index":268,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/FaqCategoryController.html":{},"controllers/FaqController.html":{},"controllers/QuestionController.html":{},"controllers/UserController.html":{}}}],["dependencies",{"_index":31,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CategoryModule.html":{},"modules/FaqCategoryModule.html":{},"modules/FaqModule.html":{},"modules/QuestionModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":171,"title":{},"body":{"controllers/AuthenticationController.html":{},"classes/CreateFaqCategoryDto.html":{},"classes/FaqCategory.html":{},"classes/User.html":{},"index.html":{},"properties.html":{}}}],["descriptor",{"_index":590,"title":{},"body":{"injectables/ResponseTransformInterceptor.html":{}}}],["descriptor.value[ignoredpropertyname",{"_index":592,"title":{},"body":{"injectables/ResponseTransformInterceptor.html":{}}}],["detail",{"_index":442,"title":{},"body":{"interfaces/IErrorBody.html":{},"interfaces/ItemsBody.html":{},"interfaces/PaginationMetaInterface.html":{},"interfaces/ResourceBody.html":{}}}],["details",{"_index":119,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["development",{"_index":748,"title":{},"body":{"index.html":{}}}],["document",{"_index":243,"title":{},"body":{"classes/Category.html":{},"classes/Faq.html":{},"classes/FaqCategory.html":{},"classes/User.html":{}}}],["documentation",{"_index":673,"title":{},"body":{"coverage.html":{}}}],["dto/authentication.dto",{"_index":144,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["dto/create",{"_index":278,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/FaqCategoryController.html":{},"injectables/FaqCategoryService.html":{},"controllers/FaqController.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dto/update",{"_index":280,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/FaqCategoryController.html":{},"injectables/FaqCategoryService.html":{},"controllers/FaqController.html":{},"injectables/FaqService.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["e2e",{"_index":759,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":734,"title":{},"body":{"index.html":{}}}],["email",{"_index":179,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/JwtStrategy.html":{},"classes/LocalStrategy.html":{},"classes/User.html":{}}}],["entities/category.entity",{"_index":295,"title":{},"body":{"modules/CategoryModule.html":{},"injectables/CategoryService.html":{}}}],["entities/faq",{"_index":379,"title":{},"body":{"modules/FaqCategoryModule.html":{},"injectables/FaqCategoryService.html":{}}}],["entities/faq.entity",{"_index":420,"title":{},"body":{"modules/FaqModule.html":{},"injectables/FaqService.html":{}}}],["entities/user.entity",{"_index":656,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["err",{"_index":87,"title":{},"body":{"injectables/AuthCheckGuard.html":{},"injectables/TokenGuard.html":{}}}],["error('invalid",{"_index":496,"title":{},"body":{"classes/JwtStorage.html":{}}}],["example",{"_index":744,"title":{},"body":{"index.html":{}}}],["exclude",{"_index":632,"title":{},"body":{"classes/User.html":{}}}],["executioncontext",{"_index":89,"title":{},"body":{"injectables/AuthCheckGuard.html":{},"injectables/ResponseTransformInterceptor.html":{},"injectables/TokenGuard.html":{}}}],["expired",{"_index":103,"title":{},"body":{"injectables/AuthCheckGuard.html":{},"injectables/TokenGuard.html":{}}}],["expiresin",{"_index":489,"title":{},"body":{"classes/JwtStorage.html":{}}}],["export",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuthCheckGuard.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateFaqCategoryDto.html":{},"classes/CreateFaqDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateUserDto.html":{},"classes/Faq.html":{},"classes/FaqCategory.html":{},"controllers/FaqCategoryController.html":{},"modules/FaqCategoryModule.html":{},"injectables/FaqCategoryService.html":{},"controllers/FaqController.html":{},"modules/FaqModule.html":{},"injectables/FaqService.html":{},"interfaces/IErrorBody.html":{},"interfaces/ItemsBody.html":{},"classes/JwtStorage.html":{},"injectables/JwtStrategy.html":{},"classes/LocalStrategy.html":{},"interfaces/PaginationMetaInterface.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"modules/QuestionModule.html":{},"injectables/QuestionService.html":{},"interfaces/ResourceBody.html":{},"injectables/ResponseTransformInterceptor.html":{},"interfaces/SignUpDTO.html":{},"injectables/TokenGuard.html":{},"interfaces/TokenStorage.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateFaqCategoryDto.html":{},"classes/UpdateFaqDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["exports",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CategoryModule.html":{},"modules/FaqCategoryModule.html":{},"modules/FaqModule.html":{},"modules/QuestionModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["express",{"_index":701,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":77,"title":{},"body":{"injectables/AuthCheckGuard.html":{},"classes/Category.html":{},"classes/Faq.html":{},"classes/FaqCategory.html":{},"injectables/JwtStrategy.html":{},"classes/LocalStrategy.html":{},"injectables/TokenGuard.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateFaqCategoryDto.html":{},"classes/UpdateFaqDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{}}}],["extracted",{"_index":120,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["extractjwt",{"_index":508,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":513,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["faq",{"_index":56,"title":{"classes/Faq.html":{}},"body":{"modules/AppModule.html":{},"classes/CreateFaqCategoryDto.html":{},"classes/Faq.html":{},"controllers/FaqCategoryController.html":{},"modules/FaqCategoryModule.html":{},"injectables/FaqCategoryService.html":{},"controllers/FaqController.html":{},"modules/FaqModule.html":{},"injectables/FaqService.html":{},"classes/UpdateFaqCategoryDto.html":{},"coverage.html":{}}}],["faq.controller",{"_index":419,"title":{},"body":{"modules/FaqModule.html":{}}}],["faq.dto",{"_index":410,"title":{},"body":{"controllers/FaqController.html":{},"injectables/FaqService.html":{},"classes/UpdateFaqDto.html":{}}}],["faq.dto.ts",{"_index":321,"title":{},"body":{"classes/CreateFaqDto.html":{},"classes/UpdateFaqDto.html":{},"coverage.html":{}}}],["faq.name",{"_index":421,"title":{},"body":{"modules/FaqModule.html":{}}}],["faq.service",{"_index":409,"title":{},"body":{"controllers/FaqController.html":{},"modules/FaqModule.html":{}}}],["faq/faq.module",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["faqcategory",{"_index":332,"title":{"classes/FaqCategory.html":{}},"body":{"classes/Faq.html":{},"classes/FaqCategory.html":{},"modules/FaqCategoryModule.html":{},"injectables/FaqCategoryService.html":{},"modules/FaqModule.html":{},"coverage.html":{}}}],["faqcategory.name",{"_index":347,"title":{},"body":{"classes/Faq.html":{},"modules/FaqCategoryModule.html":{},"modules/FaqModule.html":{}}}],["faqcategorycontroller",{"_index":359,"title":{"controllers/FaqCategoryController.html":{}},"body":{"controllers/FaqCategoryController.html":{},"modules/FaqCategoryModule.html":{},"coverage.html":{}}}],["faqcategorymodel",{"_index":384,"title":{},"body":{"injectables/FaqCategoryService.html":{}}}],["faqcategorymodule",{"_index":42,"title":{"modules/FaqCategoryModule.html":{}},"body":{"modules/AppModule.html":{},"modules/FaqCategoryModule.html":{},"modules.html":{},"overview.html":{}}}],["faqcategoryschema",{"_index":357,"title":{},"body":{"classes/FaqCategory.html":{},"modules/FaqCategoryModule.html":{},"modules/FaqModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["faqcategoryservice",{"_index":369,"title":{"injectables/FaqCategoryService.html":{}},"body":{"controllers/FaqCategoryController.html":{},"modules/FaqCategoryModule.html":{},"injectables/FaqCategoryService.html":{},"coverage.html":{},"overview.html":{}}}],["faqcategorytype",{"_index":356,"title":{},"body":{"classes/FaqCategory.html":{},"injectables/FaqCategoryService.html":{},"miscellaneous/typealiases.html":{}}}],["faqcontroller",{"_index":399,"title":{"controllers/FaqController.html":{}},"body":{"controllers/FaqController.html":{},"modules/FaqModule.html":{},"coverage.html":{}}}],["faqmodel",{"_index":425,"title":{},"body":{"injectables/FaqService.html":{}}}],["faqmodule",{"_index":43,"title":{"modules/FaqModule.html":{}},"body":{"modules/AppModule.html":{},"modules/FaqModule.html":{},"modules.html":{},"overview.html":{}}}],["faqschema",{"_index":349,"title":{},"body":{"classes/Faq.html":{},"modules/FaqModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["faqservice",{"_index":408,"title":{"injectables/FaqService.html":{}},"body":{"controllers/FaqController.html":{},"modules/FaqModule.html":{},"injectables/FaqService.html":{},"coverage.html":{},"overview.html":{}}}],["faqtype",{"_index":348,"title":{},"body":{"classes/Faq.html":{},"injectables/FaqService.html":{},"miscellaneous/typealiases.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuthCheckGuard.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateFaqCategoryDto.html":{},"classes/CreateFaqDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateUserDto.html":{},"classes/Faq.html":{},"classes/FaqCategory.html":{},"controllers/FaqCategoryController.html":{},"modules/FaqCategoryModule.html":{},"injectables/FaqCategoryService.html":{},"controllers/FaqController.html":{},"modules/FaqModule.html":{},"injectables/FaqService.html":{},"interfaces/IErrorBody.html":{},"interfaces/ItemsBody.html":{},"classes/JwtStorage.html":{},"injectables/JwtStrategy.html":{},"classes/LocalStrategy.html":{},"interfaces/PaginationMetaInterface.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"modules/QuestionModule.html":{},"injectables/QuestionService.html":{},"interfaces/ResourceBody.html":{},"injectables/ResponseTransformInterceptor.html":{},"interfaces/SignUpDTO.html":{},"injectables/TokenGuard.html":{},"interfaces/TokenStorage.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateFaqCategoryDto.html":{},"classes/UpdateFaqDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["findall",{"_index":255,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/FaqCategoryController.html":{},"injectables/FaqCategoryService.html":{},"controllers/FaqController.html":{},"injectables/FaqService.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findone",{"_index":256,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/FaqCategoryController.html":{},"injectables/FaqCategoryService.html":{},"controllers/FaqController.html":{},"injectables/FaqService.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["findone(@param('id",{"_index":285,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/FaqCategoryController.html":{},"controllers/FaqController.html":{},"controllers/QuestionController.html":{},"controllers/UserController.html":{}}}],["findone(id",{"_index":263,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/FaqCategoryController.html":{},"injectables/FaqCategoryService.html":{},"controllers/FaqController.html":{},"injectables/FaqService.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["firstname",{"_index":183,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/JwtStrategy.html":{},"interfaces/SignUpDTO.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["firstpageurl",{"_index":454,"title":{},"body":{"interfaces/IErrorBody.html":{},"interfaces/ItemsBody.html":{},"interfaces/PaginationMetaInterface.html":{},"interfaces/ResourceBody.html":{}}}],["forum",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["forumadminsecret",{"_index":492,"title":{},"body":{"classes/JwtStorage.html":{},"injectables/JwtStrategy.html":{}}}],["framework",{"_index":732,"title":{},"body":{"index.html":{}}}],["function",{"_index":586,"title":{},"body":{"injectables/ResponseTransformInterceptor.html":{},"interfaces/TokenStorage.html":{},"coverage.html":{}}}],["functions",{"_index":725,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generatetoken",{"_index":470,"title":{},"body":{"classes/JwtStorage.html":{},"interfaces/TokenStorage.html":{}}}],["generatetoken(user",{"_index":479,"title":{},"body":{"classes/JwtStorage.html":{}}}],["get('/me",{"_index":190,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["get('/me')@responsemessage('user",{"_index":118,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["get(':id",{"_index":264,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/FaqCategoryController.html":{},"controllers/FaqController.html":{},"controllers/QuestionController.html":{},"controllers/UserController.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getmydetails",{"_index":114,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["getmydetails(@request",{"_index":194,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["getmydetails(req",{"_index":117,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["getting",{"_index":728,"title":{"index.html":{}},"body":{}}],["grow",{"_index":766,"title":{},"body":{"index.html":{}}}],["guards/token.guard",{"_index":149,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["handlerequest",{"_index":79,"title":{},"body":{"injectables/AuthCheckGuard.html":{},"injectables/TokenGuard.html":{}}}],["handlerequest(err",{"_index":80,"title":{},"body":{"injectables/AuthCheckGuard.html":{},"injectables/TokenGuard.html":{}}}],["hello",{"_index":73,"title":{},"body":{"injectables/AppService.html":{}}}],["here",{"_index":777,"title":{},"body":{"index.html":{}}}],["httpcode",{"_index":90,"title":{},"body":{"injectables/AuthCheckGuard.html":{},"injectables/TokenGuard.html":{}}}],["httpexception",{"_index":91,"title":{},"body":{"injectables/AuthCheckGuard.html":{},"injectables/TokenGuard.html":{}}}],["https://nestjs.com",{"_index":784,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":92,"title":{},"body":{"injectables/AuthCheckGuard.html":{},"injectables/TokenGuard.html":{}}}],["httpstatus.forbidden",{"_index":108,"title":{},"body":{"injectables/AuthCheckGuard.html":{},"injectables/TokenGuard.html":{}}}],["id",{"_index":266,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/FaqCategoryController.html":{},"injectables/FaqCategoryService.html":{},"controllers/FaqController.html":{},"injectables/FaqService.html":{},"classes/JwtStorage.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["identifier",{"_index":674,"title":{},"body":{"coverage.html":{}}}],["ierrorbody",{"_index":439,"title":{"interfaces/IErrorBody.html":{}},"body":{"interfaces/IErrorBody.html":{},"interfaces/ItemsBody.html":{},"interfaces/PaginationMetaInterface.html":{},"interfaces/ResourceBody.html":{},"coverage.html":{}}}],["ignoredpropertyname",{"_index":584,"title":{},"body":{"injectables/ResponseTransformInterceptor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["ignoreexpiration",{"_index":514,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implements",{"_index":466,"title":{},"body":{"classes/JwtStorage.html":{},"injectables/ResponseTransformInterceptor.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuthCheckGuard.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/Faq.html":{},"classes/FaqCategory.html":{},"controllers/FaqCategoryController.html":{},"modules/FaqCategoryModule.html":{},"injectables/FaqCategoryService.html":{},"controllers/FaqController.html":{},"modules/FaqModule.html":{},"injectables/FaqService.html":{},"classes/JwtStorage.html":{},"injectables/JwtStrategy.html":{},"classes/LocalStrategy.html":{},"controllers/QuestionController.html":{},"modules/QuestionModule.html":{},"injectables/QuestionService.html":{},"injectables/ResponseTransformInterceptor.html":{},"injectables/TokenGuard.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateFaqCategoryDto.html":{},"classes/UpdateFaqDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["imports",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CategoryModule.html":{},"modules/FaqCategoryModule.html":{},"modules/FaqModule.html":{},"modules/UserModule.html":{}}}],["in')@apibody({schema",{"_index":129,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthCheckGuard.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateFaqCategoryDto.html":{},"classes/Faq.html":{},"classes/FaqCategory.html":{},"controllers/FaqCategoryController.html":{},"injectables/FaqCategoryService.html":{},"controllers/FaqController.html":{},"injectables/FaqService.html":{},"interfaces/IErrorBody.html":{},"interfaces/ItemsBody.html":{},"classes/JwtStorage.html":{},"injectables/JwtStrategy.html":{},"classes/LocalStrategy.html":{},"interfaces/PaginationMetaInterface.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"interfaces/ResourceBody.html":{},"injectables/ResponseTransformInterceptor.html":{},"interfaces/SignUpDTO.html":{},"injectables/TokenGuard.html":{},"interfaces/TokenStorage.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuthCheckGuard.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateFaqCategoryDto.html":{},"classes/CreateFaqDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateUserDto.html":{},"classes/Faq.html":{},"classes/FaqCategory.html":{},"controllers/FaqCategoryController.html":{},"modules/FaqCategoryModule.html":{},"injectables/FaqCategoryService.html":{},"controllers/FaqController.html":{},"modules/FaqModule.html":{},"injectables/FaqService.html":{},"interfaces/IErrorBody.html":{},"interfaces/ItemsBody.html":{},"classes/JwtStorage.html":{},"injectables/JwtStrategy.html":{},"classes/LocalStrategy.html":{},"interfaces/PaginationMetaInterface.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"modules/QuestionModule.html":{},"injectables/QuestionService.html":{},"interfaces/ResourceBody.html":{},"injectables/ResponseTransformInterceptor.html":{},"interfaces/SignUpDTO.html":{},"injectables/TokenGuard.html":{},"interfaces/TokenStorage.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateFaqCategoryDto.html":{},"classes/UpdateFaqDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["inject",{"_index":140,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/JwtStorage.html":{}}}],["inject('tokenstorage",{"_index":165,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["inject(jwtservice",{"_index":487,"title":{},"body":{"classes/JwtStorage.html":{}}}],["injectable",{"_index":69,"title":{"injectables/AppService.html":{},"injectables/AuthCheckGuard.html":{},"injectables/AuthenticationService.html":{},"injectables/CategoryService.html":{},"injectables/FaqCategoryService.html":{},"injectables/FaqService.html":{},"injectables/JwtStrategy.html":{},"injectables/QuestionService.html":{},"injectables/ResponseTransformInterceptor.html":{},"injectables/TokenGuard.html":{},"injectables/UserService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthCheckGuard.html":{},"injectables/AuthenticationService.html":{},"injectables/CategoryService.html":{},"injectables/FaqCategoryService.html":{},"injectables/FaqService.html":{},"injectables/JwtStrategy.html":{},"injectables/QuestionService.html":{},"injectables/ResponseTransformInterceptor.html":{},"injectables/TokenGuard.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":70,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthCheckGuard.html":{},"injectables/AuthenticationService.html":{},"injectables/CategoryService.html":{},"injectables/FaqCategoryService.html":{},"injectables/FaqService.html":{},"injectables/JwtStrategy.html":{},"injectables/QuestionService.html":{},"injectables/ResponseTransformInterceptor.html":{},"injectables/TokenGuard.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectmodel",{"_index":228,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/CategoryService.html":{},"injectables/FaqCategoryService.html":{},"injectables/FaqService.html":{},"classes/JwtStorage.html":{},"classes/LocalStrategy.html":{},"injectables/UserService.html":{}}}],["injectmodel(category.name",{"_index":306,"title":{},"body":{"injectables/CategoryService.html":{}}}],["injectmodel(faq.name",{"_index":431,"title":{},"body":{"injectables/FaqService.html":{}}}],["injectmodel(faqcategory.name",{"_index":391,"title":{},"body":{"injectables/FaqCategoryService.html":{}}}],["injectmodel(user.name",{"_index":232,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/JwtStorage.html":{},"classes/LocalStrategy.html":{},"injectables/UserService.html":{}}}],["installation",{"_index":743,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":746,"title":{},"body":{"index.html":{}}}],["instance",{"_index":443,"title":{},"body":{"interfaces/IErrorBody.html":{},"interfaces/ItemsBody.html":{},"interfaces/PaginationMetaInterface.html":{},"interfaces/ResourceBody.html":{}}}],["intercept",{"_index":570,"title":{},"body":{"injectables/ResponseTransformInterceptor.html":{}}}],["intercept(context",{"_index":571,"title":{},"body":{"injectables/ResponseTransformInterceptor.html":{}}}],["interface",{"_index":438,"title":{"interfaces/IErrorBody.html":{},"interfaces/ItemsBody.html":{},"interfaces/PaginationMetaInterface.html":{},"interfaces/ResourceBody.html":{},"interfaces/SignUpDTO.html":{},"interfaces/TokenStorage.html":{}},"body":{"interfaces/IErrorBody.html":{},"interfaces/ItemsBody.html":{},"classes/JwtStorage.html":{},"interfaces/PaginationMetaInterface.html":{},"interfaces/ResourceBody.html":{},"interfaces/SignUpDTO.html":{},"interfaces/TokenStorage.html":{},"coverage.html":{}}}],["interfaces",{"_index":440,"title":{},"body":{"interfaces/IErrorBody.html":{},"interfaces/ItemsBody.html":{},"interfaces/PaginationMetaInterface.html":{},"interfaces/ResourceBody.html":{},"interfaces/SignUpDTO.html":{},"interfaces/TokenStorage.html":{},"overview.html":{}}}],["isignored",{"_index":596,"title":{},"body":{"injectables/ResponseTransformInterceptor.html":{}}}],["isuccessbody",{"_index":463,"title":{},"body":{"interfaces/IErrorBody.html":{},"interfaces/ItemsBody.html":{},"interfaces/PaginationMetaInterface.html":{},"interfaces/ResourceBody.html":{},"injectables/ResponseTransformInterceptor.html":{},"miscellaneous/typealiases.html":{}}}],["itemcount",{"_index":449,"title":{},"body":{"interfaces/IErrorBody.html":{},"interfaces/ItemsBody.html":{},"interfaces/PaginationMetaInterface.html":{},"interfaces/ResourceBody.html":{}}}],["items",{"_index":462,"title":{},"body":{"interfaces/IErrorBody.html":{},"interfaces/ItemsBody.html":{},"interfaces/PaginationMetaInterface.html":{},"interfaces/ResourceBody.html":{}}}],["itemsbody",{"_index":461,"title":{"interfaces/ItemsBody.html":{}},"body":{"interfaces/IErrorBody.html":{},"interfaces/ItemsBody.html":{},"interfaces/PaginationMetaInterface.html":{},"interfaces/ResourceBody.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["itemsperpage",{"_index":451,"title":{},"body":{"interfaces/IErrorBody.html":{},"interfaces/ItemsBody.html":{},"interfaces/PaginationMetaInterface.html":{},"interfaces/ResourceBody.html":{}}}],["join",{"_index":773,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":219,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwtfromrequest",{"_index":512,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtservice",{"_index":211,"title":{},"body":{"modules/AuthenticationModule.html":{},"classes/JwtStorage.html":{}}}],["jwtstorage",{"_index":464,"title":{"classes/JwtStorage.html":{}},"body":{"classes/JwtStorage.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtstorage.token_expiry",{"_index":490,"title":{},"body":{"classes/JwtStorage.html":{}}}],["jwtstorage.token_type",{"_index":495,"title":{},"body":{"classes/JwtStorage.html":{}}}],["jwtstrategy",{"_index":201,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":781,"title":{},"body":{"index.html":{}}}],["label",{"_index":239,"title":{},"body":{"classes/Category.html":{},"classes/CreateFaqCategoryDto.html":{},"classes/FaqCategory.html":{}}}],["label').exec",{"_index":435,"title":{},"body":{"injectables/FaqService.html":{}}}],["lastname",{"_index":185,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/JwtStrategy.html":{},"interfaces/SignUpDTO.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["lastname:string",{"_index":606,"title":{},"body":{"interfaces/SignUpDTO.html":{}}}],["lastpageurl",{"_index":455,"title":{},"body":{"interfaces/IErrorBody.html":{},"interfaces/ItemsBody.html":{},"interfaces/PaginationMetaInterface.html":{},"interfaces/ResourceBody.html":{}}}],["legend",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CategoryModule.html":{},"modules/FaqCategoryModule.html":{},"modules/FaqModule.html":{},"modules/QuestionModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["license",{"_index":787,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":763,"title":{},"body":{"index.html":{}}}],["literal",{"_index":805,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["local",{"_index":524,"title":{},"body":{"classes/LocalStrategy.html":{},"dependencies.html":{}}}],["localstrategy",{"_index":206,"title":{"classes/LocalStrategy.html":{}},"body":{"modules/AuthenticationModule.html":{},"classes/LocalStrategy.html":{},"coverage.html":{}}}],["login",{"_index":115,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["login(@request",{"_index":174,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["login(req",{"_index":125,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["maharjan:admin123@cluster0.onqc4cv.mongodb.net/?retrywrites=true&w=majority",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["map",{"_index":577,"title":{},"body":{"injectables/ResponseTransformInterceptor.html":{}}}],["map((data",{"_index":600,"title":{},"body":{"injectables/ResponseTransformInterceptor.html":{}}}],["matching",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuthCheckGuard.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateFaqCategoryDto.html":{},"classes/CreateFaqDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateUserDto.html":{},"classes/Faq.html":{},"classes/FaqCategory.html":{},"controllers/FaqCategoryController.html":{},"modules/FaqCategoryModule.html":{},"injectables/FaqCategoryService.html":{},"controllers/FaqController.html":{},"modules/FaqModule.html":{},"injectables/FaqService.html":{},"interfaces/IErrorBody.html":{},"interfaces/ItemsBody.html":{},"classes/JwtStorage.html":{},"injectables/JwtStrategy.html":{},"classes/LocalStrategy.html":{},"interfaces/PaginationMetaInterface.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"modules/QuestionModule.html":{},"injectables/QuestionService.html":{},"interfaces/ResourceBody.html":{},"injectables/ResponseTransformInterceptor.html":{},"interfaces/SignUpDTO.html":{},"injectables/TokenGuard.html":{},"interfaces/TokenStorage.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateFaqCategoryDto.html":{},"classes/UpdateFaqDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["message",{"_index":101,"title":{},"body":{"injectables/AuthCheckGuard.html":{},"injectables/ResponseTransformInterceptor.html":{},"injectables/TokenGuard.html":{},"miscellaneous/variables.html":{}}}],["messagecode",{"_index":104,"title":{},"body":{"injectables/AuthCheckGuard.html":{},"injectables/TokenGuard.html":{}}}],["metadata",{"_index":721,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":188,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/FaqCategoryService.html":{},"injectables/UserService.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthCheckGuard.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/FaqCategoryController.html":{},"injectables/FaqCategoryService.html":{},"controllers/FaqController.html":{},"injectables/FaqService.html":{},"classes/JwtStorage.html":{},"injectables/JwtStrategy.html":{},"classes/LocalStrategy.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"injectables/ResponseTransformInterceptor.html":{},"injectables/TokenGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["miscellaneous",{"_index":724,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":762,"title":{},"body":{"index.html":{}}}],["mode",{"_index":752,"title":{},"body":{"index.html":{}}}],["model",{"_index":223,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/CategoryService.html":{},"injectables/FaqCategoryService.html":{},"injectables/FaqService.html":{},"classes/JwtStorage.html":{},"classes/LocalStrategy.html":{},"injectables/UserService.html":{}}}],["module",{"_index":28,"title":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CategoryModule.html":{},"modules/FaqCategoryModule.html":{},"modules/FaqModule.html":{},"modules/QuestionModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CategoryModule.html":{},"modules/FaqCategoryModule.html":{},"modules/FaqModule.html":{},"modules/QuestionModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["modules",{"_index":30,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CategoryModule.html":{},"modules/FaqCategoryModule.html":{},"modules/FaqModule.html":{},"modules/QuestionModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["moment",{"_index":712,"title":{},"body":{"dependencies.html":{}}}],["mongodb",{"_index":714,"title":{},"body":{"dependencies.html":{}}}],["mongodb+srv://bijay",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["mongoose",{"_index":230,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/Category.html":{},"injectables/CategoryService.html":{},"classes/Faq.html":{},"classes/FaqCategory.html":{},"injectables/FaqCategoryService.html":{},"injectables/FaqService.html":{},"classes/JwtStorage.html":{},"classes/LocalStrategy.html":{},"classes/User.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["mongoosemodule",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CategoryModule.html":{},"modules/FaqCategoryModule.html":{},"modules/FaqModule.html":{},"modules/UserModule.html":{}}}],["mongoosemodule.forfeature",{"_index":215,"title":{},"body":{"modules/AuthenticationModule.html":{},"modules/CategoryModule.html":{},"modules/FaqCategoryModule.html":{},"modules/FaqModule.html":{},"modules/UserModule.html":{}}}],["mongoosemodule.forroot",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["mongooseschema",{"_index":340,"title":{},"body":{"classes/Faq.html":{}}}],["mongooseschema.types.objectid",{"_index":346,"title":{},"body":{"classes/Faq.html":{}}}],["more",{"_index":776,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":782,"title":{},"body":{"index.html":{}}}],["name",{"_index":84,"title":{},"body":{"injectables/AuthCheckGuard.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"controllers/FaqCategoryController.html":{},"modules/FaqCategoryModule.html":{},"injectables/FaqCategoryService.html":{},"controllers/FaqController.html":{},"modules/FaqModule.html":{},"injectables/FaqService.html":{},"classes/JwtStorage.html":{},"injectables/JwtStrategy.html":{},"classes/LocalStrategy.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"injectables/ResponseTransformInterceptor.html":{},"injectables/TokenGuard.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["nest",{"_index":739,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":786,"title":{},"body":{"index.html":{}}}],["nestinterceptor",{"_index":576,"title":{},"body":{"injectables/ResponseTransformInterceptor.html":{}}}],["nestjs/class",{"_index":343,"title":{},"body":{"classes/Faq.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuthCheckGuard.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"controllers/FaqCategoryController.html":{},"modules/FaqCategoryModule.html":{},"injectables/FaqCategoryService.html":{},"controllers/FaqController.html":{},"modules/FaqModule.html":{},"injectables/FaqService.html":{},"classes/JwtStorage.html":{},"injectables/JwtStrategy.html":{},"classes/LocalStrategy.html":{},"controllers/QuestionController.html":{},"modules/QuestionModule.html":{},"injectables/QuestionService.html":{},"injectables/ResponseTransformInterceptor.html":{},"injectables/TokenGuard.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":695,"title":{},"body":{"dependencies.html":{}}}],["nestjs/core",{"_index":583,"title":{},"body":{"injectables/ResponseTransformInterceptor.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":212,"title":{},"body":{"modules/AuthenticationModule.html":{},"classes/JwtStorage.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/Category.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/Faq.html":{},"classes/FaqCategory.html":{},"modules/FaqCategoryModule.html":{},"injectables/FaqCategoryService.html":{},"modules/FaqModule.html":{},"injectables/FaqService.html":{},"classes/JwtStorage.html":{},"classes/LocalStrategy.html":{},"classes/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":95,"title":{},"body":{"injectables/AuthCheckGuard.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/JwtStrategy.html":{},"classes/LocalStrategy.html":{},"injectables/TokenGuard.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":700,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":158,"title":{},"body":{"controllers/AuthenticationController.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateFaqCategoryDto.html":{},"classes/UpdateFaqDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"dependencies.html":{}}}],["nestjs/websockets",{"_index":705,"title":{},"body":{"dependencies.html":{}}}],["new",{"_index":100,"title":{},"body":{"injectables/AuthCheckGuard.html":{},"classes/JwtStorage.html":{},"classes/LocalStrategy.html":{},"injectables/QuestionService.html":{},"injectables/ResponseTransformInterceptor.html":{},"injectables/TokenGuard.html":{},"coverage.html":{}}}],["next",{"_index":572,"title":{},"body":{"injectables/ResponseTransformInterceptor.html":{}}}],["next.handle().pipe",{"_index":599,"title":{},"body":{"injectables/ResponseTransformInterceptor.html":{}}}],["next.handle().pipe(map((data",{"_index":598,"title":{},"body":{"injectables/ResponseTransformInterceptor.html":{}}}],["nextpageurl",{"_index":456,"title":{},"body":{"interfaces/IErrorBody.html":{},"interfaces/ItemsBody.html":{},"interfaces/PaginationMetaInterface.html":{},"interfaces/ResourceBody.html":{}}}],["node.js",{"_index":731,"title":{},"body":{"index.html":{}}}],["npm",{"_index":745,"title":{},"body":{"index.html":{}}}],["null",{"_index":593,"title":{},"body":{"injectables/ResponseTransformInterceptor.html":{}}}],["number",{"_index":447,"title":{},"body":{"interfaces/IErrorBody.html":{},"interfaces/ItemsBody.html":{},"interfaces/PaginationMetaInterface.html":{},"interfaces/ResourceBody.html":{},"classes/User.html":{}}}],["object",{"_index":167,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["observable",{"_index":96,"title":{},"body":{"injectables/AuthCheckGuard.html":{},"injectables/ResponseTransformInterceptor.html":{},"injectables/TokenGuard.html":{}}}],["open",{"_index":764,"title":{},"body":{"index.html":{}}}],["optional",{"_index":86,"title":{},"body":{"injectables/AuthCheckGuard.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/FaqCategoryController.html":{},"injectables/FaqCategoryService.html":{},"controllers/FaqController.html":{},"injectables/FaqService.html":{},"interfaces/IErrorBody.html":{},"classes/JwtStorage.html":{},"injectables/JwtStrategy.html":{},"classes/LocalStrategy.html":{},"interfaces/PaginationMetaInterface.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"injectables/ResponseTransformInterceptor.html":{},"injectables/TokenGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["out",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CategoryModule.html":{},"modules/FaqCategoryModule.html":{},"modules/FaqModule.html":{},"modules/QuestionModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":791,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":692,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["paginationmetainterface",{"_index":448,"title":{"interfaces/PaginationMetaInterface.html":{}},"body":{"interfaces/IErrorBody.html":{},"interfaces/ItemsBody.html":{},"interfaces/PaginationMetaInterface.html":{},"interfaces/ResourceBody.html":{},"coverage.html":{}}}],["param",{"_index":274,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/FaqCategoryController.html":{},"controllers/FaqController.html":{},"controllers/QuestionController.html":{},"controllers/UserController.html":{}}}],["parameters",{"_index":83,"title":{},"body":{"injectables/AuthCheckGuard.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/FaqCategoryController.html":{},"injectables/FaqCategoryService.html":{},"controllers/FaqController.html":{},"injectables/FaqService.html":{},"classes/JwtStorage.html":{},"injectables/JwtStrategy.html":{},"classes/LocalStrategy.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"injectables/ResponseTransformInterceptor.html":{},"injectables/TokenGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["partialtype",{"_index":611,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"classes/UpdateFaqCategoryDto.html":{},"classes/UpdateFaqDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype(createcategorydto",{"_index":610,"title":{},"body":{"classes/UpdateCategoryDto.html":{}}}],["partialtype(createfaqcategorydto",{"_index":613,"title":{},"body":{"classes/UpdateFaqCategoryDto.html":{}}}],["partialtype(createfaqdto",{"_index":615,"title":{},"body":{"classes/UpdateFaqDto.html":{}}}],["partialtype(createquestiondto",{"_index":617,"title":{},"body":{"classes/UpdateQuestionDto.html":{}}}],["partialtype(createuserdto",{"_index":620,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["passport",{"_index":510,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":213,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["passportmodule.register",{"_index":217,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["passportstrategy",{"_index":507,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":501,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/LocalStrategy.html":{}}}],["password",{"_index":170,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/LocalStrategy.html":{},"interfaces/SignUpDTO.html":{},"classes/User.html":{}}}],["patch",{"_index":272,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/FaqCategoryController.html":{},"controllers/FaqController.html":{},"controllers/UserController.html":{}}}],["patch(':id",{"_index":367,"title":{},"body":{"controllers/FaqCategoryController.html":{},"controllers/FaqController.html":{},"controllers/UserController.html":{}}}],["payload",{"_index":506,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload._id",{"_index":516,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.email",{"_index":517,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.firstname",{"_index":518,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.lastname",{"_index":519,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["please",{"_index":774,"title":{},"body":{"index.html":{}}}],["post",{"_index":141,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CategoryController.html":{},"controllers/FaqCategoryController.html":{},"controllers/FaqController.html":{},"controllers/QuestionController.html":{},"controllers/UserController.html":{}}}],["post('/sign",{"_index":128,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["prefix",{"_index":111,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/CategoryController.html":{},"controllers/FaqCategoryController.html":{},"controllers/FaqController.html":{},"controllers/QuestionController.html":{},"controllers/UserController.html":{}}}],["previouspageurl",{"_index":457,"title":{},"body":{"interfaces/IErrorBody.html":{},"interfaces/ItemsBody.html":{},"interfaces/PaginationMetaInterface.html":{},"interfaces/ResourceBody.html":{}}}],["private",{"_index":163,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/CategoryService.html":{},"injectables/FaqCategoryService.html":{},"injectables/FaqService.html":{},"classes/JwtStorage.html":{},"classes/LocalStrategy.html":{},"injectables/UserService.html":{}}}],["production",{"_index":754,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":730,"title":{},"body":{"index.html":{}}}],["project",{"_index":765,"title":{},"body":{"index.html":{}}}],["promise",{"_index":483,"title":{},"body":{"classes/JwtStorage.html":{},"classes/LocalStrategy.html":{},"interfaces/TokenStorage.html":{}}}],["prop",{"_index":240,"title":{},"body":{"classes/Category.html":{},"classes/Faq.html":{},"classes/FaqCategory.html":{},"classes/User.html":{}}}],["prop({required",{"_index":352,"title":{},"body":{"classes/FaqCategory.html":{}}}],["prop({type",{"_index":333,"title":{},"body":{"classes/Faq.html":{},"classes/User.html":{}}}],["prop({unique",{"_index":338,"title":{},"body":{"classes/Faq.html":{},"classes/FaqCategory.html":{}}}],["properties",{"_index":168,"title":{"properties.html":{}},"body":{"controllers/AuthenticationController.html":{},"classes/Category.html":{},"classes/CreateFaqCategoryDto.html":{},"classes/Faq.html":{},"classes/FaqCategory.html":{},"interfaces/IErrorBody.html":{},"interfaces/ItemsBody.html":{},"classes/JwtStorage.html":{},"interfaces/PaginationMetaInterface.html":{},"interfaces/ResourceBody.html":{},"interfaces/SignUpDTO.html":{},"interfaces/TokenStorage.html":{},"classes/User.html":{},"properties.html":{}}}],["propertydescriptor",{"_index":591,"title":{},"body":{"injectables/ResponseTransformInterceptor.html":{}}}],["propertykey",{"_index":589,"title":{},"body":{"injectables/ResponseTransformInterceptor.html":{}}}],["provide",{"_index":810,"title":{},"body":{"miscellaneous/variables.html":{}}}],["provider",{"_index":812,"title":{},"body":{"miscellaneous/variables.html":{}}}],["providers",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CategoryModule.html":{},"modules/FaqCategoryModule.html":{},"modules/FaqModule.html":{},"modules/QuestionModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["providers/token",{"_index":209,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["public",{"_index":471,"title":{},"body":{"classes/JwtStorage.html":{}}}],["put",{"_index":542,"title":{},"body":{"controllers/QuestionController.html":{}}}],["put(':id",{"_index":540,"title":{},"body":{"controllers/QuestionController.html":{}}}],["question",{"_index":330,"title":{"classes/Question.html":{}},"body":{"classes/Faq.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"coverage.html":{}}}],["question.controller",{"_index":556,"title":{},"body":{"modules/QuestionModule.html":{}}}],["question.dto",{"_index":545,"title":{},"body":{"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"classes/UpdateQuestionDto.html":{}}}],["question.dto.ts",{"_index":324,"title":{},"body":{"classes/CreateQuestionDto.html":{},"classes/UpdateQuestionDto.html":{},"coverage.html":{}}}],["question.service",{"_index":544,"title":{},"body":{"controllers/QuestionController.html":{},"modules/QuestionModule.html":{}}}],["question/question.module",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{}}}],["questioncontroller",{"_index":532,"title":{"controllers/QuestionController.html":{}},"body":{"controllers/QuestionController.html":{},"modules/QuestionModule.html":{},"coverage.html":{}}}],["questionmodule",{"_index":44,"title":{"modules/QuestionModule.html":{}},"body":{"modules/AppModule.html":{},"modules/QuestionModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["questions",{"_index":564,"title":{},"body":{"injectables/QuestionService.html":{}}}],["questionservice",{"_index":543,"title":{"injectables/QuestionService.html":{}},"body":{"controllers/QuestionController.html":{},"modules/QuestionModule.html":{},"injectables/QuestionService.html":{},"coverage.html":{},"overview.html":{}}}],["read",{"_index":775,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/FaqCategoryController.html":{},"injectables/FaqCategoryService.html":{},"controllers/FaqController.html":{},"injectables/FaqService.html":{},"interfaces/IErrorBody.html":{},"interfaces/ItemsBody.html":{},"classes/JwtStorage.html":{},"classes/LocalStrategy.html":{},"interfaces/PaginationMetaInterface.html":{},"controllers/QuestionController.html":{},"interfaces/ResourceBody.html":{},"interfaces/TokenStorage.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["ref",{"_index":335,"title":{},"body":{"classes/Faq.html":{}}}],["reflect",{"_index":720,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":582,"title":{},"body":{"injectables/ResponseTransformInterceptor.html":{}}}],["reflector().get(responsemessagekey",{"_index":594,"title":{},"body":{"injectables/ResponseTransformInterceptor.html":{}}}],["remove",{"_index":257,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/FaqCategoryController.html":{},"injectables/FaqCategoryService.html":{},"controllers/FaqController.html":{},"injectables/FaqService.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["remove(@param('id",{"_index":289,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/FaqCategoryController.html":{},"controllers/FaqController.html":{},"controllers/QuestionController.html":{},"controllers/UserController.html":{}}}],["remove(id",{"_index":267,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/FaqCategoryController.html":{},"injectables/FaqCategoryService.html":{},"controllers/FaqController.html":{},"injectables/FaqService.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["removes",{"_index":566,"title":{},"body":{"injectables/QuestionService.html":{}}}],["repository",{"_index":742,"title":{},"body":{"index.html":{}}}],["req",{"_index":123,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["req.user",{"_index":189,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["req.user._id",{"_index":182,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["req.user.email",{"_index":180,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["req.user.firstname",{"_index":184,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["req.user.lastname",{"_index":186,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["reqid",{"_index":603,"title":{},"body":{"injectables/ResponseTransformInterceptor.html":{}}}],["request",{"_index":142,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["required",{"_index":355,"title":{},"body":{"classes/FaqCategory.html":{}}}],["res",{"_index":126,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["reset",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CategoryModule.html":{},"modules/FaqCategoryModule.html":{},"modules/FaqModule.html":{},"modules/QuestionModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["resourcebody",{"_index":458,"title":{"interfaces/ResourceBody.html":{}},"body":{"interfaces/IErrorBody.html":{},"interfaces/ItemsBody.html":{},"interfaces/PaginationMetaInterface.html":{},"interfaces/ResourceBody.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["response",{"_index":127,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["response/types",{"_index":579,"title":{},"body":{"injectables/ResponseTransformInterceptor.html":{}}}],["responsemessage",{"_index":152,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/ResponseTransformInterceptor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["responsemessage('user",{"_index":191,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["responsemessagekey",{"_index":580,"title":{},"body":{"injectables/ResponseTransformInterceptor.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["responsetransforminterceptor",{"_index":567,"title":{"injectables/ResponseTransformInterceptor.html":{}},"body":{"injectables/ResponseTransformInterceptor.html":{},"coverage.html":{}}}],["responsetransforminterceptorignore",{"_index":587,"title":{},"body":{"injectables/ResponseTransformInterceptor.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["results",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuthCheckGuard.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateFaqCategoryDto.html":{},"classes/CreateFaqDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateUserDto.html":{},"classes/Faq.html":{},"classes/FaqCategory.html":{},"controllers/FaqCategoryController.html":{},"modules/FaqCategoryModule.html":{},"injectables/FaqCategoryService.html":{},"controllers/FaqController.html":{},"modules/FaqModule.html":{},"injectables/FaqService.html":{},"interfaces/IErrorBody.html":{},"interfaces/ItemsBody.html":{},"classes/JwtStorage.html":{},"injectables/JwtStrategy.html":{},"classes/LocalStrategy.html":{},"interfaces/PaginationMetaInterface.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"modules/QuestionModule.html":{},"injectables/QuestionService.html":{},"interfaces/ResourceBody.html":{},"injectables/ResponseTransformInterceptor.html":{},"interfaces/SignUpDTO.html":{},"injectables/TokenGuard.html":{},"interfaces/TokenStorage.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateFaqCategoryDto.html":{},"classes/UpdateFaqDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthCheckGuard.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/FaqCategoryController.html":{},"injectables/FaqCategoryService.html":{},"controllers/FaqController.html":{},"injectables/FaqService.html":{},"classes/JwtStorage.html":{},"injectables/JwtStrategy.html":{},"classes/LocalStrategy.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"injectables/ResponseTransformInterceptor.html":{},"injectables/TokenGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["returns",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthCheckGuard.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/FaqCategoryController.html":{},"injectables/FaqCategoryService.html":{},"controllers/FaqController.html":{},"injectables/FaqService.html":{},"classes/JwtStorage.html":{},"injectables/JwtStrategy.html":{},"classes/LocalStrategy.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"injectables/ResponseTransformInterceptor.html":{},"injectables/TokenGuard.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["run",{"_index":749,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":97,"title":{},"body":{"injectables/AuthCheckGuard.html":{},"injectables/ResponseTransformInterceptor.html":{},"injectables/TokenGuard.html":{},"dependencies.html":{}}}],["rxjs/operators",{"_index":578,"title":{},"body":{"injectables/ResponseTransformInterceptor.html":{}}}],["scalable",{"_index":735,"title":{},"body":{"index.html":{}}}],["schema",{"_index":166,"title":{},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"classes/Category.html":{},"modules/CategoryModule.html":{},"classes/Faq.html":{},"classes/FaqCategory.html":{},"modules/FaqCategoryModule.html":{},"modules/FaqModule.html":{},"classes/User.html":{},"modules/UserModule.html":{}}}],["schemafactory",{"_index":242,"title":{},"body":{"classes/Category.html":{},"classes/Faq.html":{},"classes/FaqCategory.html":{},"classes/User.html":{}}}],["schemafactory.createforclass(category",{"_index":251,"title":{},"body":{"classes/Category.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(faq",{"_index":350,"title":{},"body":{"classes/Faq.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(faqcategory",{"_index":358,"title":{},"body":{"classes/FaqCategory.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(user",{"_index":634,"title":{},"body":{"classes/User.html":{},"miscellaneous/variables.html":{}}}],["secret",{"_index":491,"title":{},"body":{"classes/JwtStorage.html":{}}}],["secretorkey",{"_index":515,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["server",{"_index":736,"title":{},"body":{"index.html":{}}}],["setmetadata(responsemessagekey",{"_index":809,"title":{},"body":{"miscellaneous/variables.html":{}}}],["side",{"_index":737,"title":{},"body":{"index.html":{}}}],["sign",{"_index":132,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["signup",{"_index":116,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["signup(@body",{"_index":196,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["signup(body",{"_index":135,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["signupdto",{"_index":136,"title":{"interfaces/SignUpDTO.html":{}},"body":{"controllers/AuthenticationController.html":{},"interfaces/SignUpDTO.html":{},"coverage.html":{}}}],["socket.io",{"_index":702,"title":{},"body":{"dependencies.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"injectables/AuthCheckGuard.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"modules/CategoryModule.html":{},"injectables/CategoryService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateFaqCategoryDto.html":{},"classes/CreateFaqDto.html":{},"classes/CreateQuestionDto.html":{},"classes/CreateUserDto.html":{},"classes/Faq.html":{},"classes/FaqCategory.html":{},"controllers/FaqCategoryController.html":{},"modules/FaqCategoryModule.html":{},"injectables/FaqCategoryService.html":{},"controllers/FaqController.html":{},"modules/FaqModule.html":{},"injectables/FaqService.html":{},"interfaces/IErrorBody.html":{},"interfaces/ItemsBody.html":{},"classes/JwtStorage.html":{},"injectables/JwtStrategy.html":{},"classes/LocalStrategy.html":{},"interfaces/PaginationMetaInterface.html":{},"classes/Question.html":{},"controllers/QuestionController.html":{},"modules/QuestionModule.html":{},"injectables/QuestionService.html":{},"interfaces/ResourceBody.html":{},"injectables/ResponseTransformInterceptor.html":{},"interfaces/SignUpDTO.html":{},"injectables/TokenGuard.html":{},"interfaces/TokenStorage.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateFaqCategoryDto.html":{},"classes/UpdateFaqDto.html":{},"classes/UpdateQuestionDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"index.html":{}}}],["sponsors",{"_index":768,"title":{},"body":{"index.html":{}}}],["src/.../category.entity.ts",{"_index":800,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../faq",{"_index":801,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../faq.entity.ts",{"_index":802,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":726,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../response",{"_index":727,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../response.decorator.ts",{"_index":807,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../token",{"_index":808,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../types.ts",{"_index":803,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../user.entity.ts",{"_index":804,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":71,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":72,"title":{},"body":{"injectables/AppService.html":{}}}],["src/authentication/authentication.controller.ts",{"_index":110,"title":{},"body":{"controllers/AuthenticationController.html":{},"coverage.html":{}}}],["src/authentication/authentication.controller.ts:46",{"_index":134,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.controller.ts:64",{"_index":122,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.controller.ts:69",{"_index":138,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.module.ts",{"_index":202,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["src/authentication/authentication.service.ts",{"_index":220,"title":{},"body":{"injectables/AuthenticationService.html":{},"coverage.html":{}}}],["src/authentication/authentication.service.ts:15",{"_index":227,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:9",{"_index":224,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/dto/authentication.dto.ts",{"_index":605,"title":{},"body":{"interfaces/SignUpDTO.html":{},"coverage.html":{}}}],["src/authentication/guards/token.guard.ts",{"_index":76,"title":{},"body":{"injectables/AuthCheckGuard.html":{},"injectables/TokenGuard.html":{},"coverage.html":{}}}],["src/authentication/guards/token.guard.ts:15",{"_index":607,"title":{},"body":{"injectables/TokenGuard.html":{}}}],["src/authentication/guards/token.guard.ts:34",{"_index":82,"title":{},"body":{"injectables/AuthCheckGuard.html":{}}}],["src/authentication/providers/token",{"_index":680,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/authentication/storage/jwt.storage.ts",{"_index":465,"title":{},"body":{"classes/JwtStorage.html":{},"coverage.html":{}}}],["src/authentication/storage/jwt.storage.ts:12",{"_index":478,"title":{},"body":{"classes/JwtStorage.html":{}}}],["src/authentication/storage/jwt.storage.ts:13",{"_index":473,"title":{},"body":{"classes/JwtStorage.html":{}}}],["src/authentication/storage/jwt.storage.ts:21",{"_index":480,"title":{},"body":{"classes/JwtStorage.html":{}}}],["src/authentication/storage/jwt.storage.ts:27",{"_index":482,"title":{},"body":{"classes/JwtStorage.html":{}}}],["src/authentication/storage/token.storage.ts",{"_index":608,"title":{},"body":{"interfaces/TokenStorage.html":{},"coverage.html":{}}}],["src/authentication/strategy/jwt.strategy.ts",{"_index":500,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/authentication/strategy/jwt.strategy.ts:15",{"_index":505,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/authentication/strategy/jwt.strategy.ts:6",{"_index":503,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/authentication/strategy/local.strategy.ts",{"_index":520,"title":{},"body":{"classes/LocalStrategy.html":{},"coverage.html":{}}}],["src/authentication/strategy/local.strategy.ts:17",{"_index":523,"title":{},"body":{"classes/LocalStrategy.html":{}}}],["src/authentication/strategy/local.strategy.ts:9",{"_index":521,"title":{},"body":{"classes/LocalStrategy.html":{}}}],["src/category/category.controller.ts",{"_index":253,"title":{},"body":{"controllers/CategoryController.html":{},"coverage.html":{}}}],["src/category/category.controller.ts:11",{"_index":261,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/category/category.controller.ts:16",{"_index":262,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/category/category.controller.ts:21",{"_index":265,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/category/category.controller.ts:26",{"_index":273,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/category/category.controller.ts:31",{"_index":269,"title":{},"body":{"controllers/CategoryController.html":{}}}],["src/category/category.module.ts",{"_index":293,"title":{},"body":{"modules/CategoryModule.html":{}}}],["src/category/category.service.ts",{"_index":297,"title":{},"body":{"injectables/CategoryService.html":{},"coverage.html":{}}}],["src/category/category.service.ts:16",{"_index":301,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/category/category.service.ts:22",{"_index":302,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/category/category.service.ts:26",{"_index":303,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/category/category.service.ts:30",{"_index":305,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/category/category.service.ts:36",{"_index":304,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/category/category.service.ts:9",{"_index":299,"title":{},"body":{"injectables/CategoryService.html":{}}}],["src/category/dto/create",{"_index":312,"title":{},"body":{"classes/CreateCategoryDto.html":{},"coverage.html":{}}}],["src/category/dto/update",{"_index":609,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["src/category/entities/category.entity.ts",{"_index":238,"title":{},"body":{"classes/Category.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/category/entities/category.entity.ts:12",{"_index":241,"title":{},"body":{"classes/Category.html":{}}}],["src/core/decorators/response.decorator.ts",{"_index":686,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/interceptors/response",{"_index":568,"title":{},"body":{"injectables/ResponseTransformInterceptor.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/core/response/types.ts",{"_index":441,"title":{},"body":{"interfaces/IErrorBody.html":{},"interfaces/ItemsBody.html":{},"interfaces/PaginationMetaInterface.html":{},"interfaces/ResourceBody.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/faq",{"_index":315,"title":{},"body":{"classes/CreateFaqCategoryDto.html":{},"classes/FaqCategory.html":{},"controllers/FaqCategoryController.html":{},"modules/FaqCategoryModule.html":{},"injectables/FaqCategoryService.html":{},"classes/UpdateFaqCategoryDto.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/faq/dto/create",{"_index":320,"title":{},"body":{"classes/CreateFaqDto.html":{},"coverage.html":{}}}],["src/faq/dto/update",{"_index":614,"title":{},"body":{"classes/UpdateFaqDto.html":{},"coverage.html":{}}}],["src/faq/entities/faq.entity.ts",{"_index":328,"title":{},"body":{"classes/Faq.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/faq/entities/faq.entity.ts:15",{"_index":339,"title":{},"body":{"classes/Faq.html":{}}}],["src/faq/entities/faq.entity.ts:18",{"_index":331,"title":{},"body":{"classes/Faq.html":{}}}],["src/faq/entities/faq.entity.ts:25",{"_index":337,"title":{},"body":{"classes/Faq.html":{}}}],["src/faq/faq.controller.ts",{"_index":400,"title":{},"body":{"controllers/FaqController.html":{},"coverage.html":{}}}],["src/faq/faq.controller.ts:11",{"_index":402,"title":{},"body":{"controllers/FaqController.html":{}}}],["src/faq/faq.controller.ts:16",{"_index":403,"title":{},"body":{"controllers/FaqController.html":{}}}],["src/faq/faq.controller.ts:21",{"_index":404,"title":{},"body":{"controllers/FaqController.html":{}}}],["src/faq/faq.controller.ts:26",{"_index":407,"title":{},"body":{"controllers/FaqController.html":{}}}],["src/faq/faq.controller.ts:31",{"_index":405,"title":{},"body":{"controllers/FaqController.html":{}}}],["src/faq/faq.module.ts",{"_index":418,"title":{},"body":{"modules/FaqModule.html":{}}}],["src/faq/faq.service.ts",{"_index":422,"title":{},"body":{"injectables/FaqService.html":{},"coverage.html":{}}}],["src/faq/faq.service.ts:14",{"_index":426,"title":{},"body":{"injectables/FaqService.html":{}}}],["src/faq/faq.service.ts:20",{"_index":427,"title":{},"body":{"injectables/FaqService.html":{}}}],["src/faq/faq.service.ts:24",{"_index":428,"title":{},"body":{"injectables/FaqService.html":{}}}],["src/faq/faq.service.ts:28",{"_index":430,"title":{},"body":{"injectables/FaqService.html":{}}}],["src/faq/faq.service.ts:34",{"_index":429,"title":{},"body":{"injectables/FaqService.html":{}}}],["src/faq/faq.service.ts:8",{"_index":424,"title":{},"body":{"injectables/FaqService.html":{}}}],["src/main.ts",{"_index":689,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/question/dto/create",{"_index":323,"title":{},"body":{"classes/CreateQuestionDto.html":{},"coverage.html":{}}}],["src/question/dto/update",{"_index":616,"title":{},"body":{"classes/UpdateQuestionDto.html":{},"coverage.html":{}}}],["src/question/entities/question.entity.ts",{"_index":531,"title":{},"body":{"classes/Question.html":{},"coverage.html":{}}}],["src/question/question.controller.ts",{"_index":533,"title":{},"body":{"controllers/QuestionController.html":{},"coverage.html":{}}}],["src/question/question.controller.ts:11",{"_index":535,"title":{},"body":{"controllers/QuestionController.html":{}}}],["src/question/question.controller.ts:16",{"_index":536,"title":{},"body":{"controllers/QuestionController.html":{}}}],["src/question/question.controller.ts:22",{"_index":537,"title":{},"body":{"controllers/QuestionController.html":{}}}],["src/question/question.controller.ts:27",{"_index":541,"title":{},"body":{"controllers/QuestionController.html":{}}}],["src/question/question.controller.ts:32",{"_index":538,"title":{},"body":{"controllers/QuestionController.html":{}}}],["src/question/question.module.ts",{"_index":555,"title":{},"body":{"modules/QuestionModule.html":{}}}],["src/question/question.service.ts",{"_index":557,"title":{},"body":{"injectables/QuestionService.html":{},"coverage.html":{}}}],["src/question/question.service.ts:11",{"_index":559,"title":{},"body":{"injectables/QuestionService.html":{}}}],["src/question/question.service.ts:15",{"_index":560,"title":{},"body":{"injectables/QuestionService.html":{}}}],["src/question/question.service.ts:19",{"_index":562,"title":{},"body":{"injectables/QuestionService.html":{}}}],["src/question/question.service.ts:23",{"_index":561,"title":{},"body":{"injectables/QuestionService.html":{}}}],["src/question/question.service.ts:7",{"_index":558,"title":{},"body":{"injectables/QuestionService.html":{}}}],["src/user/dto/create",{"_index":326,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/user/dto/update",{"_index":619,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/user/entities/user.entity.ts",{"_index":622,"title":{},"body":{"classes/User.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/user/entities/user.entity.ts:12",{"_index":624,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:17",{"_index":625,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:23",{"_index":623,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:29",{"_index":627,"title":{},"body":{"classes/User.html":{}}}],["src/user/entities/user.entity.ts:36",{"_index":631,"title":{},"body":{"classes/User.html":{}}}],["src/user/user.controller.ts",{"_index":636,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:13",{"_index":638,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:18",{"_index":639,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:23",{"_index":640,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:28",{"_index":642,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:33",{"_index":641,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.module.ts",{"_index":654,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service.ts",{"_index":657,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:14",{"_index":659,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:22",{"_index":661,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:26",{"_index":660,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:30",{"_index":662,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:34",{"_index":664,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:40",{"_index":663,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:9",{"_index":658,"title":{},"body":{"injectables/UserService.html":{}}}],["start",{"_index":750,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":753,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":755,"title":{},"body":{"index.html":{}}}],["started",{"_index":729,"title":{"index.html":{}},"body":{}}],["starter",{"_index":741,"title":{},"body":{"index.html":{}}}],["statements",{"_index":675,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":467,"title":{},"body":{"classes/JwtStorage.html":{}}}],["status",{"_index":444,"title":{},"body":{"interfaces/IErrorBody.html":{},"interfaces/ItemsBody.html":{},"interfaces/PaginationMetaInterface.html":{},"interfaces/ResourceBody.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["statuscode",{"_index":106,"title":{},"body":{"injectables/AuthCheckGuard.html":{},"injectables/ResponseTransformInterceptor.html":{},"injectables/TokenGuard.html":{}}}],["stay",{"_index":778,"title":{},"body":{"index.html":{}}}],["storage.provider",{"_index":210,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["storage.provider.ts",{"_index":681,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["storage/token.storage",{"_index":148,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["strategy",{"_index":509,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/LocalStrategy.html":{}}}],["strategy/jwt.strategy",{"_index":214,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["strategy/local.strategy",{"_index":207,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["string",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthenticationController.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateFaqCategoryDto.html":{},"classes/Faq.html":{},"classes/FaqCategory.html":{},"controllers/FaqCategoryController.html":{},"injectables/FaqCategoryService.html":{},"controllers/FaqController.html":{},"injectables/FaqService.html":{},"interfaces/IErrorBody.html":{},"interfaces/ItemsBody.html":{},"classes/JwtStorage.html":{},"classes/LocalStrategy.html":{},"interfaces/PaginationMetaInterface.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"interfaces/ResourceBody.html":{},"injectables/ResponseTransformInterceptor.html":{},"interfaces/SignUpDTO.html":{},"interfaces/TokenStorage.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["string'})@exclude",{"_index":626,"title":{},"body":{"classes/User.html":{}}}],["string(password",{"_index":529,"title":{},"body":{"classes/LocalStrategy.html":{}}}],["string(user.password",{"_index":530,"title":{},"body":{"classes/LocalStrategy.html":{}}}],["sub",{"_index":486,"title":{},"body":{"classes/JwtStorage.html":{}}}],["successfully",{"_index":192,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["successfully')@useguards(tokenguard",{"_index":121,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["super",{"_index":511,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/LocalStrategy.html":{}}}],["supertest",{"_index":159,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["supplied",{"_index":527,"title":{},"body":{"classes/LocalStrategy.html":{}}}],["support",{"_index":769,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":789,"title":{},"body":{"modules.html":{}}}],["symbol('ignoredpropertyname",{"_index":585,"title":{},"body":{"injectables/ResponseTransformInterceptor.html":{},"miscellaneous/variables.html":{}}}],["t",{"_index":460,"title":{},"body":{"interfaces/IErrorBody.html":{},"interfaces/ItemsBody.html":{},"interfaces/PaginationMetaInterface.html":{},"interfaces/ResourceBody.html":{}}}],["table",{"_index":691,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":690,"title":{},"body":{"coverage.html":{}}}],["target",{"_index":588,"title":{},"body":{"injectables/ResponseTransformInterceptor.html":{}}}],["test",{"_index":758,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":761,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":760,"title":{},"body":{"index.html":{}}}],["tests",{"_index":757,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":767,"title":{},"body":{"index.html":{}}}],["this.appservice.gethello",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.createuser(body",{"_index":197,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.categorymodel.create",{"_index":307,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.categorymodel.deleteone({_id",{"_index":311,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.categorymodel.find",{"_index":308,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.categorymodel.findbyid(id",{"_index":309,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.categorymodel.findbyidandupdate(id",{"_index":310,"title":{},"body":{"injectables/CategoryService.html":{}}}],["this.categoryservice.create(createcategorydto",{"_index":283,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.findall",{"_index":284,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.findone(id",{"_index":286,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.remove(id",{"_index":290,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.categoryservice.update(id",{"_index":288,"title":{},"body":{"controllers/CategoryController.html":{}}}],["this.faqcategorymodel.create",{"_index":392,"title":{},"body":{"injectables/FaqCategoryService.html":{}}}],["this.faqcategorymodel.deleteone",{"_index":398,"title":{},"body":{"injectables/FaqCategoryService.html":{}}}],["this.faqcategorymodel.find",{"_index":393,"title":{},"body":{"injectables/FaqCategoryService.html":{}}}],["this.faqcategorymodel.findbyid(id",{"_index":396,"title":{},"body":{"injectables/FaqCategoryService.html":{}}}],["this.faqcategorymodel.findbyidandupdate(id",{"_index":397,"title":{},"body":{"injectables/FaqCategoryService.html":{}}}],["this.faqcategoryservice.create(createfaqcategorydto",{"_index":371,"title":{},"body":{"controllers/FaqCategoryController.html":{}}}],["this.faqcategoryservice.findall",{"_index":372,"title":{},"body":{"controllers/FaqCategoryController.html":{}}}],["this.faqcategoryservice.findone(id",{"_index":373,"title":{},"body":{"controllers/FaqCategoryController.html":{}}}],["this.faqcategoryservice.remove(id",{"_index":375,"title":{},"body":{"controllers/FaqCategoryController.html":{}}}],["this.faqcategoryservice.update(id",{"_index":374,"title":{},"body":{"controllers/FaqCategoryController.html":{}}}],["this.faqmodel.create",{"_index":432,"title":{},"body":{"injectables/FaqService.html":{}}}],["this.faqmodel.deleteone",{"_index":437,"title":{},"body":{"injectables/FaqService.html":{}}}],["this.faqmodel.find",{"_index":433,"title":{},"body":{"injectables/FaqService.html":{}}}],["this.faqmodel.findbyid(id).populate('category','_id",{"_index":434,"title":{},"body":{"injectables/FaqService.html":{}}}],["this.faqmodel.findbyidandupdate(id",{"_index":436,"title":{},"body":{"injectables/FaqService.html":{}}}],["this.faqservice.create(createfaqdto",{"_index":411,"title":{},"body":{"controllers/FaqController.html":{}}}],["this.faqservice.findall",{"_index":412,"title":{},"body":{"controllers/FaqController.html":{}}}],["this.faqservice.findone(id",{"_index":413,"title":{},"body":{"controllers/FaqController.html":{}}}],["this.faqservice.remove(id",{"_index":415,"title":{},"body":{"controllers/FaqController.html":{}}}],["this.faqservice.update(id",{"_index":414,"title":{},"body":{"controllers/FaqController.html":{}}}],["this.jwtservice.signasync(user",{"_index":488,"title":{},"body":{"classes/JwtStorage.html":{}}}],["this.jwtservice.verifyasync(token",{"_index":493,"title":{},"body":{"classes/JwtStorage.html":{}}}],["this.questionservice.create(createquestiondto",{"_index":547,"title":{},"body":{"controllers/QuestionController.html":{}}}],["this.questionservice.findall",{"_index":548,"title":{},"body":{"controllers/QuestionController.html":{}}}],["this.questionservice.findone(id",{"_index":549,"title":{},"body":{"controllers/QuestionController.html":{}}}],["this.questionservice.remove(id",{"_index":551,"title":{},"body":{"controllers/QuestionController.html":{}}}],["this.questionservice.update(id",{"_index":550,"title":{},"body":{"controllers/QuestionController.html":{}}}],["this.tokenstorage.generatetoken",{"_index":178,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.usermodel.create",{"_index":235,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UserService.html":{}}}],["this.usermodel.deleteone",{"_index":671,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usermodel.find",{"_index":668,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usermodel.findbyidandupdate(id",{"_index":670,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usermodel.findone",{"_index":498,"title":{},"body":{"classes/JwtStorage.html":{},"classes/LocalStrategy.html":{}}}],["this.usermodel.findone(id",{"_index":669,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.create(createuserdto",{"_index":646,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findall",{"_index":647,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findone(id",{"_index":648,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findone(req.user._id",{"_index":195,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.userservice.remove(id",{"_index":650,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.update(id",{"_index":649,"title":{},"body":{"controllers/UserController.html":{}}}],["throw",{"_index":99,"title":{},"body":{"injectables/AuthCheckGuard.html":{},"classes/JwtStorage.html":{},"classes/LocalStrategy.html":{},"injectables/TokenGuard.html":{}}}],["timestamps",{"_index":244,"title":{},"body":{"classes/Category.html":{},"classes/Faq.html":{},"classes/FaqCategory.html":{},"classes/User.html":{}}}],["title",{"_index":445,"title":{},"body":{"interfaces/IErrorBody.html":{},"interfaces/ItemsBody.html":{},"interfaces/PaginationMetaInterface.html":{},"interfaces/ResourceBody.html":{}}}],["tojson",{"_index":245,"title":{},"body":{"classes/Category.html":{},"classes/Faq.html":{},"classes/FaqCategory.html":{},"classes/User.html":{}}}],["token",{"_index":102,"title":{},"body":{"injectables/AuthCheckGuard.html":{},"controllers/AuthenticationController.html":{},"classes/JwtStorage.html":{},"injectables/TokenGuard.html":{},"interfaces/TokenStorage.html":{}}}],["token.storage",{"_index":484,"title":{},"body":{"classes/JwtStorage.html":{}}}],["token_expired",{"_index":105,"title":{},"body":{"injectables/AuthCheckGuard.html":{},"injectables/TokenGuard.html":{}}}],["token_expiry",{"_index":468,"title":{},"body":{"classes/JwtStorage.html":{}}}],["token_type",{"_index":469,"title":{},"body":{"classes/JwtStorage.html":{}}}],["tokenbody",{"_index":485,"title":{},"body":{"classes/JwtStorage.html":{}}}],["tokenbody.sub",{"_index":499,"title":{},"body":{"classes/JwtStorage.html":{}}}],["tokenbody.type",{"_index":494,"title":{},"body":{"classes/JwtStorage.html":{}}}],["tokenguard",{"_index":98,"title":{"injectables/TokenGuard.html":{}},"body":{"injectables/AuthCheckGuard.html":{},"controllers/AuthenticationController.html":{},"injectables/TokenGuard.html":{},"coverage.html":{}}}],["tokenstorage",{"_index":147,"title":{"interfaces/TokenStorage.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/JwtStorage.html":{},"interfaces/TokenStorage.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["tokenstorageprovider",{"_index":208,"title":{},"body":{"modules/AuthenticationModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["toobject",{"_index":247,"title":{},"body":{"classes/Category.html":{},"classes/Faq.html":{},"classes/FaqCategory.html":{},"classes/User.html":{}}}],["totalitems",{"_index":450,"title":{},"body":{"interfaces/IErrorBody.html":{},"interfaces/ItemsBody.html":{},"interfaces/PaginationMetaInterface.html":{},"interfaces/ResourceBody.html":{}}}],["totalpages",{"_index":452,"title":{},"body":{"interfaces/IErrorBody.html":{},"interfaces/ItemsBody.html":{},"interfaces/PaginationMetaInterface.html":{},"interfaces/ResourceBody.html":{}}}],["touch",{"_index":779,"title":{},"body":{"index.html":{}}}],["transform.interceptor.ts",{"_index":569,"title":{},"body":{"injectables/ResponseTransformInterceptor.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["transform.interceptor.ts:29",{"_index":574,"title":{},"body":{"injectables/ResponseTransformInterceptor.html":{}}}],["transformer",{"_index":344,"title":{},"body":{"classes/Faq.html":{},"classes/User.html":{},"dependencies.html":{}}}],["true",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"classes/Category.html":{},"classes/Faq.html":{},"classes/FaqCategory.html":{},"injectables/JwtStrategy.html":{},"injectables/ResponseTransformInterceptor.html":{},"classes/User.html":{}}}],["twitter",{"_index":785,"title":{},"body":{"index.html":{}}}],["type",{"_index":85,"title":{},"body":{"injectables/AuthCheckGuard.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/Category.html":{},"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/CreateFaqCategoryDto.html":{},"classes/Faq.html":{},"classes/FaqCategory.html":{},"controllers/FaqCategoryController.html":{},"injectables/FaqCategoryService.html":{},"controllers/FaqController.html":{},"injectables/FaqService.html":{},"interfaces/IErrorBody.html":{},"interfaces/ItemsBody.html":{},"classes/JwtStorage.html":{},"injectables/JwtStrategy.html":{},"classes/LocalStrategy.html":{},"interfaces/PaginationMetaInterface.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"interfaces/ResourceBody.html":{},"injectables/ResponseTransformInterceptor.html":{},"interfaces/SignUpDTO.html":{},"injectables/TokenGuard.html":{},"interfaces/TokenStorage.html":{},"classes/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":798,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types/bcrypt",{"_index":706,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":740,"title":{},"body":{"index.html":{}}}],["unauthorizedexception",{"_index":93,"title":{},"body":{"injectables/AuthCheckGuard.html":{},"classes/LocalStrategy.html":{},"injectables/TokenGuard.html":{}}}],["unauthorizedexception('invalid",{"_index":526,"title":{},"body":{"classes/LocalStrategy.html":{}}}],["undefined",{"_index":334,"title":{},"body":{"classes/Faq.html":{},"injectables/ResponseTransformInterceptor.html":{}}}],["undefined})@apiokresponse({description",{"_index":130,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["undefined})@type(undefined",{"_index":336,"title":{},"body":{"classes/Faq.html":{}}}],["unique",{"_index":345,"title":{},"body":{"classes/Faq.html":{},"classes/FaqCategory.html":{},"classes/User.html":{}}}],["unique:true",{"_index":633,"title":{},"body":{"classes/User.html":{}}}],["unit",{"_index":756,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":124,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/JwtStorage.html":{},"injectables/JwtStrategy.html":{}}}],["unlicensed",{"_index":797,"title":{},"body":{"properties.html":{}}}],["up",{"_index":137,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["update",{"_index":258,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/FaqCategoryController.html":{},"injectables/FaqCategoryService.html":{},"controllers/FaqController.html":{},"injectables/FaqService.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["update(@param('id",{"_index":287,"title":{},"body":{"controllers/CategoryController.html":{},"controllers/FaqCategoryController.html":{},"controllers/FaqController.html":{},"controllers/QuestionController.html":{},"controllers/UserController.html":{}}}],["update(id",{"_index":270,"title":{},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"controllers/FaqCategoryController.html":{},"injectables/FaqCategoryService.html":{},"controllers/FaqController.html":{},"injectables/FaqService.html":{},"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updatecategorydto",{"_index":271,"title":{"classes/UpdateCategoryDto.html":{}},"body":{"controllers/CategoryController.html":{},"injectables/CategoryService.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["updatefaqcategorydto",{"_index":366,"title":{"classes/UpdateFaqCategoryDto.html":{}},"body":{"controllers/FaqCategoryController.html":{},"injectables/FaqCategoryService.html":{},"classes/UpdateFaqCategoryDto.html":{},"coverage.html":{}}}],["updatefaqdto",{"_index":406,"title":{"classes/UpdateFaqDto.html":{}},"body":{"controllers/FaqController.html":{},"injectables/FaqService.html":{},"classes/UpdateFaqDto.html":{},"coverage.html":{}}}],["updatequestiondto",{"_index":539,"title":{"classes/UpdateQuestionDto.html":{}},"body":{"controllers/QuestionController.html":{},"injectables/QuestionService.html":{},"classes/UpdateQuestionDto.html":{},"coverage.html":{}}}],["updates",{"_index":565,"title":{},"body":{"injectables/QuestionService.html":{}}}],["updateuserdto",{"_index":618,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["useclass",{"_index":811,"title":{},"body":{"miscellaneous/variables.html":{}}}],["useguards",{"_index":143,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["useguards(authguard('local",{"_index":173,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["useguards(tokenguard",{"_index":193,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["user",{"_index":81,"title":{"classes/User.html":{}},"body":{"injectables/AuthCheckGuard.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/JwtStorage.html":{},"classes/LocalStrategy.html":{},"injectables/TokenGuard.html":{},"interfaces/TokenStorage.html":{},"classes/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["user.controller",{"_index":655,"title":{},"body":{"modules/UserModule.html":{}}}],["user.dto",{"_index":621,"title":{},"body":{"classes/UpdateUserDto.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":327,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.name",{"_index":216,"title":{},"body":{"modules/AuthenticationModule.html":{},"modules/UserModule.html":{}}}],["user.service",{"_index":643,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user/entities/user.entity",{"_index":205,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/JwtStorage.html":{},"classes/LocalStrategy.html":{}}}],["user/user.module",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{}}}],["user/user.service",{"_index":151,"title":{},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{}}}],["usercontroller",{"_index":635,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["usermodel",{"_index":225,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/JwtStorage.html":{},"classes/LocalStrategy.html":{},"injectables/UserService.html":{}}}],["usermodule",{"_index":45,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":169,"title":{},"body":{"controllers/AuthenticationController.html":{},"classes/LocalStrategy.html":{},"interfaces/SignUpDTO.html":{}}}],["users",{"_index":172,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["users'})@useguards(undefined",{"_index":133,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["userschema",{"_index":204,"title":{},"body":{"modules/AuthenticationModule.html":{},"classes/User.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userservice",{"_index":150,"title":{"injectables/UserService.html":{}},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["usertype",{"_index":229,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/JwtStorage.html":{},"classes/LocalStrategy.html":{},"classes/User.html":{},"injectables/UserService.html":{},"miscellaneous/typealiases.html":{}}}],["validate",{"_index":502,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/LocalStrategy.html":{}}}],["validate(payload",{"_index":504,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(username",{"_index":522,"title":{},"body":{"classes/LocalStrategy.html":{}}}],["validatetoken",{"_index":472,"title":{},"body":{"classes/JwtStorage.html":{},"interfaces/TokenStorage.html":{}}}],["validatetoken(token",{"_index":481,"title":{},"body":{"classes/JwtStorage.html":{}}}],["validationerrors",{"_index":446,"title":{},"body":{"interfaces/IErrorBody.html":{},"interfaces/ItemsBody.html":{},"interfaces/PaginationMetaInterface.html":{},"interfaces/ResourceBody.html":{},"miscellaneous/typealiases.html":{}}}],["validator",{"_index":710,"title":{},"body":{"dependencies.html":{}}}],["value",{"_index":475,"title":{},"body":{"classes/JwtStorage.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":682,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":806,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":795,"title":{},"body":{"properties.html":{}}}],["virtuals",{"_index":248,"title":{},"body":{"classes/Category.html":{},"classes/Faq.html":{},"classes/FaqCategory.html":{},"classes/User.html":{}}}],["virtuals:true",{"_index":246,"title":{},"body":{"classes/Category.html":{}}}],["watch",{"_index":751,"title":{},"body":{"index.html":{}}}],["website",{"_index":783,"title":{},"body":{"index.html":{}}}],["world",{"_index":74,"title":{},"body":{"injectables/AppService.html":{}}}],["you'd",{"_index":772,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/CategoryModule.html":{},"modules/FaqCategoryModule.html":{},"modules/FaqModule.html":{},"modules/QuestionModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthenticationModule->AppModule\n\n\n\n\n\nCategoryModule\n\nCategoryModule\n\nAppModule -->\n\nCategoryModule->AppModule\n\n\n\n\n\nFaqCategoryModule\n\nFaqCategoryModule\n\nAppModule -->\n\nFaqCategoryModule->AppModule\n\n\n\n\n\nFaqModule\n\nFaqModule\n\nAppModule -->\n\nFaqModule->AppModule\n\n\n\n\n\nQuestionModule\n\nQuestionModule\n\nAppModule -->\n\nQuestionModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthenticationModule\n                        \n                        \n                            CategoryModule\n                        \n                        \n                            FaqCategoryModule\n                        \n                        \n                            FaqModule\n                        \n                        \n                            QuestionModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UserModule } from './user/user.module';\nimport { CategoryModule } from './category/category.module';\nimport { QuestionModule } from './question/question.module';\nimport { FaqModule } from './faq/faq.module';\nimport { FaqCategoryModule } from './faq-category/faq-category.module';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { AuthenticationModule } from './authentication/authentication.module';\n\n@Module({\n  imports: [\n    MongooseModule.forRoot(\n      'mongodb+srv://Bijay-Maharjan:admin123@cluster0.onqc4cv.mongodb.net/?retryWrites=true&w=majority',\n      {\n        dbName: 'forum',\n        autoCreate: true\n      }\n    ),\n    UserModule,\n    CategoryModule,\n    QuestionModule,\n    FaqModule,\n    FaqCategoryModule,\n    AuthenticationModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Hello World!';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthCheckGuard.html":{"url":"injectables/AuthCheckGuard.html","title":"injectable - AuthCheckGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthCheckGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/guards/token.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('jwt')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(err, user, info: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/authentication/guards/token.guard.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                err\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                info\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CanActivate,\n  ExecutionContext,\n  HttpCode,\n  HttpException,\n  HttpStatus,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class TokenGuard extends AuthGuard('jwt') {\n  handleRequest(err, user, info: any) {\n    if (info) {\n      throw new HttpException(\n        {\n          message: 'Token expired',\n          messageCode: 'TOKEN_EXPIRED',\n          statusCode: 403,\n        },\n        HttpStatus.FORBIDDEN,\n      );\n    }\n    if (err || !user) throw err || new UnauthorizedException();\n\n    return user;\n  }\n}\n\n@Injectable()\nexport class AuthCheckGuard extends AuthGuard('jwt') {\n  handleRequest(err, user, info: any) {\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthenticationController.html":{"url":"controllers/AuthenticationController.html","title":"controller - AuthenticationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthenticationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/authentication.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                authentication\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                getMyDetails\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    Async\n                                login\n                            \n                            \n                                    \n                                    Async\n                                signup\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        getMyDetails\n                        \n                    \n                \n            \n            \n                \n                        \n                    getMyDetails(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/me')@ResponseMessage('User Details extracted successfully')@UseGuards(TokenGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/authentication/authentication.controller.ts:64\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(req: any, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/sign-in')@ApiBody({schema: undefined})@ApiOkResponse({description: 'API to sign in users'})@UseGuards(undefined)\n                \n            \n\n                    \n                        \n                            Defined in src/authentication/authentication.controller.ts:46\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        signup\n                        \n                    \n                \n            \n            \n                \n                        \n                    signup(body: SignUpDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/sign-up')\n                \n            \n\n                    \n                        \n                            Defined in src/authentication/authentication.controller.ts:69\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            SignUpDTO\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  Inject,\n  Post,\n  Request,\n  UseGuards,\n} from '@nestjs/common';\nimport { SignUpDTO } from './dto/authentication.dto';\nimport { AuthenticationService } from './authentication.service';\nimport { AuthGuard } from '@nestjs/passport';\nimport { TokenStorage } from './storage/token.storage';\nimport { TokenGuard } from './guards/token.guard';\nimport { UserService } from '../user/user.service';\nimport { ResponseMessage } from '../core/decorators/response.decorator';\nimport { ApiBody, ApiOkResponse, ApiResponse, ApiTags } from \"@nestjs/swagger\";\nimport { Response } from 'supertest';\n\n@ApiTags('Authentication')\n@Controller('authentication')\nexport class AuthenticationController {\n  constructor(\n    private readonly authService: AuthenticationService,\n    @Inject('TokenStorage')\n    private readonly tokenStorage: TokenStorage,\n    private readonly userService: UserService,\n  ) {}\n\n  @Post('/sign-in')\n  @ApiBody({\n    schema: {\n      type: 'object',\n      properties: {\n        username: {\n          type: 'string',\n        },\n        password: {\n          type: 'string',\n        },\n      },\n    },\n  })\n  @ApiOkResponse({ description: 'API to sign in users' })\n  @UseGuards(AuthGuard('local'))\n  async login(@Request() req: any, res: Response) {\n    console.log(req.user);\n    const token = await this.tokenStorage.generateToken({\n      email: req.user.email,\n      _id: req.user._id,\n      // firstName: req.user.firstName,\n      // lastName: req.user.lastName,\n    });\n    // console.log('inside method');\n    return {\n      user: req.user,\n      token: token,\n    };\n  }\n\n  @Get('/me')\n  @ResponseMessage('User Details extracted successfully')\n  @UseGuards(TokenGuard)\n  async getMyDetails(@Request() req: any) {\n    return this.userService.findOne(req.user._id);\n  }\n\n  @Post('/sign-up')\n  async signup(@Body() body: SignUpDTO) {\n    return this.authService.createUser(body);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthenticationModule.html":{"url":"modules/AuthenticationModule.html","title":"module - AuthenticationModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthenticationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthenticationModule\n\n\n\ncluster_AuthenticationModule_providers\n\n\n\ncluster_AuthenticationModule_imports\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\nAuthenticationModule -->\n\nUserModule->AuthenticationModule\n\n\n\n\n\nAuthenticationService\n\nAuthenticationService\n\nAuthenticationModule -->\n\nAuthenticationService->AuthenticationModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthenticationModule -->\n\nJwtStrategy->AuthenticationModule\n\n\n\n\n\nUserService\n\nUserService\n\nAuthenticationModule -->\n\nUserService->AuthenticationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/authentication/authentication.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthenticationService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthenticationController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthenticationController } from './authentication.controller';\nimport { AuthenticationService } from './authentication.service';\nimport { UserModule } from '../user/user.module';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { User, UserSchema } from '../user/entities/user.entity';\nimport { LocalStrategy } from './strategy/local.strategy';\nimport { TokenStorageProvider } from './providers/token-storage.provider';\nimport { JwtService } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtStrategy } from './strategy/jwt.strategy';\nimport { UserService } from '../user/user.service';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: User.name, schema: UserSchema }]),\n    UserModule,\n    PassportModule.register({ defaultStrategy: 'jwt' }),\n  ],\n  controllers: [AuthenticationController],\n  providers: [\n    JwtService,\n    UserService,\n    TokenStorageProvider,\n    LocalStrategy,\n    JwtStrategy,\n    AuthenticationService,\n  ],\n})\nexport class AuthenticationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthenticationService.html":{"url":"injectables/AuthenticationService.html","title":"injectable - AuthenticationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthenticationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/authentication.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/authentication.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        createUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    createUser(body: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/authentication/authentication.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                body\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { User, UserType } from '../user/entities/user.entity';\nimport { Model } from 'mongoose';\nimport * as bcrypt from 'bcrypt';\nimport { TokenStorage } from './storage/token.storage';\n\n@Injectable()\nexport class AuthenticationService {\n  constructor(\n    @InjectModel(User.name)\n    private readonly userModel: Model,\n  ) {}\n\n  async createUser(body: any) {\n    const password = await bcrypt.hash(body.password, 10);\n    return this.userModel.create({\n      ...body,\n      password: password,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Category.html":{"url":"classes/Category.html","title":"class - Category","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Category\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/category/entities/category.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                label\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        label\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/category/entities/category.entity.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\nimport { Document } from \"mongoose\";\n\n@Schema({\n    timestamps: true,\n    toJSON: { virtuals:true },\n    toObject: { virtuals: true },\n})\nexport class Category extends Document {\n    @Prop()\n    label: string;\n}\n\nexport type CategoryType = Category & Document;\nexport const CategorySchema = SchemaFactory.createForClass(Category);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CategoryController.html":{"url":"controllers/CategoryController.html","title":"controller - CategoryController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CategoryController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/category/category.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                category\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                create\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createCategoryDto: CreateCategoryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/category/category.controller.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createCategoryDto\n                                            \n                                                            CreateCategoryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/category/category.controller.ts:16\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/category/category.controller.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/category/category.controller.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateCategoryDto: UpdateCategoryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':')\n                \n            \n\n                    \n                        \n                            Defined in src/category/category.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateCategoryDto\n                                            \n                                                            UpdateCategoryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Patch, Param, Delete } from '@nestjs/common';\nimport { CategoryService } from './category.service';\nimport { CreateCategoryDto } from './dto/create-category.dto';\nimport { UpdateCategoryDto } from './dto/update-category.dto';\n\n@Controller('category')\nexport class CategoryController {\n  constructor(private readonly categoryService: CategoryService) {}\n\n  @Post()\n  create(@Body() createCategoryDto: CreateCategoryDto) {\n    return this.categoryService.create(createCategoryDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.categoryService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.categoryService.findOne(id);\n  }\n\n  @Patch(':')\n  update(@Param('id') id: string, @Body() updateCategoryDto: UpdateCategoryDto) {\n    return this.categoryService.update(id, updateCategoryDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.categoryService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CategoryModule.html":{"url":"modules/CategoryModule.html","title":"module - CategoryModule","body":"\n                   \n\n\n\n\n    Modules\n    CategoryModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CategoryModule\n\n\n\ncluster_CategoryModule_providers\n\n\n\n\nCategoryService\n\nCategoryService\n\n\n\nCategoryModule\n\nCategoryModule\n\nCategoryModule -->\n\nCategoryService->CategoryModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/category/category.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CategoryService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CategoryController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CategoryService } from './category.service';\nimport { CategoryController } from './category.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Category, CategorySchema } from './entities/category.entity';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      { name: Category.name, schema: CategorySchema },\n    ]),\n  ],\n  controllers: [CategoryController],\n  providers: [CategoryService],\n})\nexport class CategoryModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CategoryService.html":{"url":"injectables/CategoryService.html","title":"injectable - CategoryService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CategoryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/category/category.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(categoryModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/category/category.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        categoryModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createCategoryDto: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/category/category.service.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createCategoryDto\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/category/category.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/category/category.service.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/category/category.service.ts:36\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateCategoryDto: UpdateCategoryDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/category/category.service.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateCategoryDto\n                                            \n                                                            UpdateCategoryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateCategoryDto } from './dto/create-category.dto';\nimport { UpdateCategoryDto } from './dto/update-category.dto';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Category, CategoryType } from './entities/category.entity';\nimport { Model } from 'mongoose';\n\n@Injectable()\nexport class CategoryService {\n  constructor(\n    @InjectModel(Category.name)\n    private readonly categoryModel: Model,\n  ) {}\n\n  // create(createCategoryDto: CreateCategoryDto) {\n  create(createCategoryDto: any) {\n    return this.categoryModel.create({\n      ...createCategoryDto,\n    });\n  }\n\n  findAll() {\n    return this.categoryModel.find({});\n  }\n\n  findOne(id: string) {\n    return this.categoryModel.findById(id);\n  }\n\n  update(id: string, updateCategoryDto: UpdateCategoryDto) {\n    return this.categoryModel.findByIdAndUpdate(id, {\n      ...UpdateCategoryDto,\n    });\n  }\n\n  remove(id: string) {\n    return this.categoryModel.deleteOne({_id: id});\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCategoryDto.html":{"url":"classes/CreateCategoryDto.html","title":"class - CreateCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/category/dto/create-category.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateCategoryDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateFaqCategoryDto.html":{"url":"classes/CreateFaqCategoryDto.html","title":"class - CreateFaqCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateFaqCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/faq-category/dto/create-faq-category.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                            \n                                label\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/faq-category/dto/create-faq-category.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        label\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/faq-category/dto/create-faq-category.dto.ts:2\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateFaqCategoryDto {\n    label: string;\n    description: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateFaqDto.html":{"url":"classes/CreateFaqDto.html","title":"class - CreateFaqDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateFaqDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/faq/dto/create-faq.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateFaqDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateQuestionDto.html":{"url":"classes/CreateQuestionDto.html","title":"class - CreateQuestionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateQuestionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question/dto/create-question.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateQuestionDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateUserDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Faq.html":{"url":"classes/Faq.html","title":"class - Faq","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Faq\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/faq/entities/faq.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                answer\n                            \n                            \n                                    \n                                    \n                                category\n                            \n                            \n                                    \n                                question\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        answer\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/faq/entities/faq.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         FaqCategory\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: undefined})@Type(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/faq/entities/faq.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        question\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/faq/entities/faq.entity.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document, Schema as MongooseSchema } from 'mongoose';\nimport { FaqCategory } from '../../faq-category/entities/faq-category.entity';\nimport { Type } from '@nestjs/class-transformer';\n\n@Schema({\n  timestamps: true,\n  toJSON: { virtuals: true },\n  toObject: { virtuals: true },\n})\nexport class Faq extends Document {\n  @Prop({\n    unique: true,\n  })\n  question: string;\n\n  @Prop()\n  answer: string;\n\n  @Prop({\n    type: MongooseSchema.Types.ObjectId,\n    ref: FaqCategory.name,\n  })\n  @Type(() => FaqCategory)\n  category: FaqCategory;\n}\n\nexport type FaqType = Faq & Document;\nexport const FaqSchema = SchemaFactory.createForClass(Faq);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FaqCategory.html":{"url":"classes/FaqCategory.html","title":"class - FaqCategory","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FaqCategory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/faq-category/entities/faq-category.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                description\n                            \n                            \n                                    \n                                label\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/faq-category/entities/faq-category.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        label\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/faq-category/entities/faq-category.entity.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\n@Schema({\n  timestamps: true,\n  toJSON: { virtuals: true },\n  toObject: { virtuals: true },\n})\nexport class FaqCategory extends Document {\n  @Prop({\n    unique: true,\n  })\n  label: string;\n\n  @Prop({\n    required: true,\n  })\n  description: string;\n}\n\nexport type FaqCategoryType = FaqCategory & Document;\nexport const FaqCategorySchema = SchemaFactory.createForClass(FaqCategory);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/FaqCategoryController.html":{"url":"controllers/FaqCategoryController.html","title":"controller - FaqCategoryController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  FaqCategoryController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/faq-category/faq-category.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                faq-category\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                create\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createFaqCategoryDto: CreateFaqCategoryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/faq-category/faq-category.controller.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createFaqCategoryDto\n                                            \n                                                            CreateFaqCategoryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/faq-category/faq-category.controller.ts:16\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/faq-category/faq-category.controller.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/faq-category/faq-category.controller.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateFaqCategoryDto: UpdateFaqCategoryDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/faq-category/faq-category.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateFaqCategoryDto\n                                            \n                                                            UpdateFaqCategoryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Patch, Param, Delete } from '@nestjs/common';\nimport { FaqCategoryService } from './faq-category.service';\nimport { CreateFaqCategoryDto } from './dto/create-faq-category.dto';\nimport { UpdateFaqCategoryDto } from './dto/update-faq-category.dto';\n\n@Controller('faq-category')\nexport class FaqCategoryController {\n  constructor(private readonly faqCategoryService: FaqCategoryService) {}\n\n  @Post()\n  create(@Body() createFaqCategoryDto: CreateFaqCategoryDto) {\n    return this.faqCategoryService.create(createFaqCategoryDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.faqCategoryService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.faqCategoryService.findOne(id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateFaqCategoryDto: UpdateFaqCategoryDto) {\n    return this.faqCategoryService.update(id, updateFaqCategoryDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.faqCategoryService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FaqCategoryModule.html":{"url":"modules/FaqCategoryModule.html","title":"module - FaqCategoryModule","body":"\n                   \n\n\n\n\n    Modules\n    FaqCategoryModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FaqCategoryModule\n\n\n\ncluster_FaqCategoryModule_providers\n\n\n\n\nFaqCategoryService\n\nFaqCategoryService\n\n\n\nFaqCategoryModule\n\nFaqCategoryModule\n\nFaqCategoryModule -->\n\nFaqCategoryService->FaqCategoryModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/faq-category/faq-category.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FaqCategoryService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            FaqCategoryController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { FaqCategoryService } from './faq-category.service';\nimport { FaqCategoryController } from './faq-category.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { FaqCategory, FaqCategorySchema } from './entities/faq-category.entity';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      { name: FaqCategory.name, schema: FaqCategorySchema },\n    ]),\n  ],\n  controllers: [FaqCategoryController],\n  providers: [FaqCategoryService],\n})\nexport class FaqCategoryModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FaqCategoryService.html":{"url":"injectables/FaqCategoryService.html","title":"injectable - FaqCategoryService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FaqCategoryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/faq-category/faq-category.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                customMethod\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(faqCategoryModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/faq-category/faq-category.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        faqCategoryModel\n                                                  \n                                                        \n                                                                    Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createFaqCategoryDto: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/faq-category/faq-category.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createFaqCategoryDto\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        customMethod\n                        \n                    \n                \n            \n            \n                \ncustomMethod()\n                \n            \n\n\n                    \n                        \n                            Defined in src/faq-category/faq-category.service.ts:24\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/faq-category/faq-category.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/faq-category/faq-category.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/faq-category/faq-category.service.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateFaqCategoryDto: UpdateFaqCategoryDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/faq-category/faq-category.service.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateFaqCategoryDto\n                                            \n                                                            UpdateFaqCategoryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateFaqCategoryDto } from './dto/create-faq-category.dto';\nimport { UpdateFaqCategoryDto } from './dto/update-faq-category.dto';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { FaqCategory, FaqCategoryType } from './entities/faq-category.entity';\nimport { Model } from 'mongoose';\n\n@Injectable()\nexport class FaqCategoryService {\n  constructor(\n    @InjectModel(FaqCategory.name)\n    private readonly faqCategoryModel: Model,\n  ) {}\n  create(createFaqCategoryDto: any) {\n    return this.faqCategoryModel.create({\n      ...createFaqCategoryDto\n    });\n  }\n\n  findAll() {\n    return this.faqCategoryModel.find({});\n  }\n\n  customMethod() {\n    return `This action returns all custom method`;\n  }\n\n  findOne(id: string) {\n    return this.faqCategoryModel.findById(id);\n  }\n\n  update(id: string, updateFaqCategoryDto: UpdateFaqCategoryDto) {\n    return this.faqCategoryModel.findByIdAndUpdate(id, {\n      ...updateFaqCategoryDto,\n    });\n  }\n\n  remove(id: string) {\n    return this.faqCategoryModel.deleteOne({ _id: id });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/FaqController.html":{"url":"controllers/FaqController.html","title":"controller - FaqController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  FaqController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/faq/faq.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                faq\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                create\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createFaqDto: CreateFaqDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/faq/faq.controller.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createFaqDto\n                                            \n                                                            CreateFaqDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/faq/faq.controller.ts:16\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/faq/faq.controller.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/faq/faq.controller.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateFaqDto: UpdateFaqDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/faq/faq.controller.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateFaqDto\n                                            \n                                                            UpdateFaqDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Patch, Param, Delete } from '@nestjs/common';\nimport { FaqService } from './faq.service';\nimport { CreateFaqDto } from './dto/create-faq.dto';\nimport { UpdateFaqDto } from './dto/update-faq.dto';\n\n@Controller('faq')\nexport class FaqController {\n  constructor(private readonly faqService: FaqService) {}\n\n  @Post()\n  create(@Body() createFaqDto: CreateFaqDto) {\n    return this.faqService.create(createFaqDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.faqService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.faqService.findOne(id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateFaqDto: UpdateFaqDto) {\n    return this.faqService.update(id, updateFaqDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.faqService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FaqModule.html":{"url":"modules/FaqModule.html","title":"module - FaqModule","body":"\n                   \n\n\n\n\n    Modules\n    FaqModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FaqModule\n\n\n\ncluster_FaqModule_providers\n\n\n\n\nFaqService\n\nFaqService\n\n\n\nFaqModule\n\nFaqModule\n\nFaqModule -->\n\nFaqService->FaqModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/faq/faq.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FaqService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            FaqController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { FaqService } from './faq.service';\nimport { FaqController } from './faq.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Faq, FaqSchema } from './entities/faq.entity';\nimport {\n  FaqCategory,\n  FaqCategorySchema,\n} from '../faq-category/entities/faq-category.entity';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      { name: Faq.name, schema: FaqSchema },\n      { name: FaqCategory.name, schema: FaqCategorySchema },\n    ]),\n  ],\n  controllers: [FaqController],\n  providers: [FaqService],\n})\nexport class FaqModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FaqService.html":{"url":"injectables/FaqService.html","title":"injectable - FaqService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FaqService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/faq/faq.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(faqModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/faq/faq.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        faqModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createFaqDto: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/faq/faq.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createFaqDto\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/faq/faq.service.ts:20\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/faq/faq.service.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/faq/faq.service.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateFaqDto: UpdateFaqDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/faq/faq.service.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateFaqDto\n                                            \n                                                            UpdateFaqDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { UpdateFaqDto } from './dto/update-faq.dto';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Faq, FaqType } from './entities/faq.entity';\nimport { Model } from 'mongoose';\n\n@Injectable()\nexport class FaqService {\n  constructor(\n    @InjectModel(Faq.name)\n    private readonly faqModel: Model,\n  ) {}\n\n  create(createFaqDto: any) {\n    return this.faqModel.create({\n      ...createFaqDto,\n    });\n  }\n\n  findAll() {\n    return this.faqModel.find({});\n  }\n\n  findOne(id: string) {\n    return this.faqModel.findById(id).populate('category','_id label').exec();\n  }\n\n  update(id: string, updateFaqDto: UpdateFaqDto) {\n    return this.faqModel.findByIdAndUpdate(id, {\n      ...updateFaqDto,\n    });\n  }\n\n  remove(id: string) {\n    return this.faqModel.deleteOne({ _id: id });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IErrorBody.html":{"url":"interfaces/IErrorBody.html","title":"interface - IErrorBody","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IErrorBody\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/response/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            detail\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            instance\n                                        \n                                \n                                \n                                        \n                                            status\n                                        \n                                \n                                \n                                        \n                                            title\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            type\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            validationErrors\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        detail\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        detail:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        instance\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        instance:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        status\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        status:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        validationErrors\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        validationErrors:         ValidationErrors\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         ValidationErrors\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type ValidationErrors = {\n  readonly [type: string]: {\n    readonly [type: string]: string;\n  };\n};\n\nexport interface IErrorBody {\n  readonly type?: string;\n  readonly title: string;\n  readonly status: number;\n  readonly detail?: string;\n  readonly instance?: string;\n  readonly validationErrors?: ValidationErrors;\n}\n\nexport interface PaginationMetaInterface {\n  readonly itemCount: number;\n  readonly totalItems: number;\n  readonly itemsPerPage: number;\n  readonly totalPages: number;\n  readonly currentPage: number;\n  readonly firstPageUrl?: string;\n  readonly lastPageUrl?: string;\n  readonly nextPageUrl?: string;\n  readonly previousPageUrl?: string;\n}\n\nexport interface ResourceBody {\n  readonly data: T;\n}\n\nexport interface ItemsBody {\n  readonly items: T;\n}\n\nexport type ISuccessBody = ResourceBody | ItemsBody;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ItemsBody.html":{"url":"interfaces/ItemsBody.html","title":"interface - ItemsBody","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ItemsBody\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/response/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            items\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        items\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        items:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type ValidationErrors = {\n  readonly [type: string]: {\n    readonly [type: string]: string;\n  };\n};\n\nexport interface IErrorBody {\n  readonly type?: string;\n  readonly title: string;\n  readonly status: number;\n  readonly detail?: string;\n  readonly instance?: string;\n  readonly validationErrors?: ValidationErrors;\n}\n\nexport interface PaginationMetaInterface {\n  readonly itemCount: number;\n  readonly totalItems: number;\n  readonly itemsPerPage: number;\n  readonly totalPages: number;\n  readonly currentPage: number;\n  readonly firstPageUrl?: string;\n  readonly lastPageUrl?: string;\n  readonly nextPageUrl?: string;\n  readonly previousPageUrl?: string;\n}\n\nexport interface ResourceBody {\n  readonly data: T;\n}\n\nexport interface ItemsBody {\n  readonly items: T;\n}\n\nexport type ISuccessBody = ResourceBody | ItemsBody;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/JwtStorage.html":{"url":"classes/JwtStorage.html","title":"class - JwtStorage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  JwtStorage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/storage/jwt.storage.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                            TokenStorage\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                TOKEN_EXPIRY\n                            \n                            \n                                    Private\n                                    Static\n                                    Readonly\n                                TOKEN_TYPE\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generateToken\n                            \n                            \n                                    Public\n                                    Async\n                                validateToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/storage/jwt.storage.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                            Readonly\n                        TOKEN_EXPIRY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '7 days'\n                    \n                \n                    \n                        \n                                Defined in src/authentication/storage/jwt.storage.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Static\n                            Readonly\n                        TOKEN_TYPE\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'authentication'\n                    \n                \n                    \n                        \n                                Defined in src/authentication/storage/jwt.storage.ts:13\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        generateToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateToken(user: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/authentication/storage/jwt.storage.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        validateToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateToken(token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/authentication/storage/jwt.storage.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { JwtService } from '@nestjs/jwt';\nimport { User, UserType } from '../../user/entities/user.entity';\nimport { TokenStorage } from './token.storage';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model } from 'mongoose';\nimport { Inject } from '@nestjs/common';\n// interface TokenBody {\n//   readonly type: string;\n//   readonly sub: string;\n// }\nexport class JwtStorage implements TokenStorage {\n  private static readonly TOKEN_EXPIRY = '7 days';\n  private static readonly TOKEN_TYPE = 'authentication';\n  constructor(\n    @InjectModel(User.name)\n    private readonly userModel: Model,\n    @Inject(JwtService)\n    private readonly jwtService: JwtService,\n  ) {}\n\n  async generateToken(user: any) {\n    return this.jwtService.signAsync(user, {\n      expiresIn: JwtStorage.TOKEN_EXPIRY,\n      secret: 'forumadminsecret',\n    });\n  }\n  public async validateToken(token: string): Promise {\n    const tokenBody: any = await this.jwtService.verifyAsync(token);\n    if (tokenBody.type !== JwtStorage.TOKEN_TYPE) {\n      throw new Error('Invalid token');\n    }\n\n    console.log(tokenBody);\n\n    return this.userModel.findOne({ where: { id: tokenBody.sub } });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/strategy/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/authentication/strategy/jwt.strategy.ts:6\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(payload: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/authentication/strategy/jwt.strategy.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: true,\n      secretOrKey: 'forumadminsecret',\n    });\n  }\n\n  async validate(payload: any) {\n    return {\n      _id: payload._id,\n      email: payload.email,\n      // firstName: payload.firstName,\n      // lastName: payload.lastName,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LocalStrategy.html":{"url":"classes/LocalStrategy.html","title":"class - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/strategy/local.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/strategy/local.strategy.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(username: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/authentication/strategy/local.strategy.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PassportStrategy } from '@nestjs/passport';\nimport { Strategy } from 'passport-local';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { User, UserType } from '../../user/entities/user.entity';\nimport { Model } from 'mongoose';\nimport * as bcrypt from 'bcrypt';\nimport { UnauthorizedException } from \"@nestjs/common\";\n\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    @InjectModel(User.name)\n    private readonly userModel: Model,\n  ) {\n    super();\n  }\n\n  async validate(username: string, password: string): Promise {\n    console.log(username);\n    const user = await this.userModel.findOne({\n      email: username,\n    });\n\n    if (!user) {\n      throw new UnauthorizedException('Invalid email supplied');\n    }\n\n    if (await bcrypt.compare(\n      String(password), \n      String(user.password),\n      )) {\n      return user;\n    }\n\n    throw new UnauthorizedException('Invalid password supplied');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PaginationMetaInterface.html":{"url":"interfaces/PaginationMetaInterface.html","title":"interface - PaginationMetaInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PaginationMetaInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/response/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            currentPage\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            firstPageUrl\n                                        \n                                \n                                \n                                        \n                                            itemCount\n                                        \n                                \n                                \n                                        \n                                            itemsPerPage\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            lastPageUrl\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            nextPageUrl\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            previousPageUrl\n                                        \n                                \n                                \n                                        \n                                            totalItems\n                                        \n                                \n                                \n                                        \n                                            totalPages\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        currentPage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        currentPage:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        firstPageUrl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        firstPageUrl:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        itemCount\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        itemCount:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        itemsPerPage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        itemsPerPage:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastPageUrl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lastPageUrl:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nextPageUrl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nextPageUrl:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        previousPageUrl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        previousPageUrl:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        totalItems\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        totalItems:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        totalPages\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        totalPages:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type ValidationErrors = {\n  readonly [type: string]: {\n    readonly [type: string]: string;\n  };\n};\n\nexport interface IErrorBody {\n  readonly type?: string;\n  readonly title: string;\n  readonly status: number;\n  readonly detail?: string;\n  readonly instance?: string;\n  readonly validationErrors?: ValidationErrors;\n}\n\nexport interface PaginationMetaInterface {\n  readonly itemCount: number;\n  readonly totalItems: number;\n  readonly itemsPerPage: number;\n  readonly totalPages: number;\n  readonly currentPage: number;\n  readonly firstPageUrl?: string;\n  readonly lastPageUrl?: string;\n  readonly nextPageUrl?: string;\n  readonly previousPageUrl?: string;\n}\n\nexport interface ResourceBody {\n  readonly data: T;\n}\n\nexport interface ItemsBody {\n  readonly items: T;\n}\n\nexport type ISuccessBody = ResourceBody | ItemsBody;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Question.html":{"url":"classes/Question.html","title":"class - Question","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Question\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question/entities/question.entity.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Question {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/QuestionController.html":{"url":"controllers/QuestionController.html","title":"controller - QuestionController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  QuestionController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question/question.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                question\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                create\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createQuestionDto: CreateQuestionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/question/question.controller.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createQuestionDto\n                                            \n                                                            CreateQuestionDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/question/question.controller.ts:16\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/question/question.controller.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/question/question.controller.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateQuestionDto: UpdateQuestionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/question/question.controller.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateQuestionDto\n                                            \n                                                            UpdateQuestionDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Put, Param, Delete } from '@nestjs/common';\nimport { QuestionService } from './question.service';\nimport { CreateQuestionDto } from './dto/create-question.dto';\nimport { UpdateQuestionDto } from './dto/update-question.dto';\n\n@Controller('question')\nexport class QuestionController {\n  constructor(private readonly questionService: QuestionService) {}\n\n  @Post()\n  create(@Body() createQuestionDto: CreateQuestionDto) {\n    return this.questionService.create(createQuestionDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.questionService.findAll();\n  }\n\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.questionService.findOne(id);\n  }\n\n  @Put(':id')\n  update(@Param('id') id: string, @Body() updateQuestionDto: UpdateQuestionDto) {\n    return this.questionService.update(id, updateQuestionDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.questionService.remove(id);\n  }\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/QuestionModule.html":{"url":"modules/QuestionModule.html","title":"module - QuestionModule","body":"\n                   \n\n\n\n\n    Modules\n    QuestionModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_QuestionModule\n\n\n\ncluster_QuestionModule_exports\n\n\n\ncluster_QuestionModule_providers\n\n\n\n\nQuestionService \n\nQuestionService \n\n\n\nQuestionModule\n\nQuestionModule\n\nQuestionService  -->\n\nQuestionModule->QuestionService \n\n\n\n\n\nQuestionService\n\nQuestionService\n\nQuestionModule -->\n\nQuestionService->QuestionModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/question/question.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            QuestionService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            QuestionController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            QuestionService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { QuestionService } from './question.service';\nimport { QuestionController } from './question.controller';\n\n@Module({\n  controllers: [QuestionController],\n  providers: [QuestionService],\n  exports: [QuestionService]\n})\nexport class QuestionModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/QuestionService.html":{"url":"injectables/QuestionService.html","title":"injectable - QuestionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  QuestionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question/question.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createQuestionDto: CreateQuestionDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/question/question.service.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createQuestionDto\n                                            \n                                                            CreateQuestionDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/question/question.service.ts:11\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/question/question.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/question/question.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateQuestionDto: UpdateQuestionDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/question/question.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateQuestionDto\n                                            \n                                                            UpdateQuestionDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateQuestionDto } from './dto/create-question.dto';\nimport { UpdateQuestionDto } from './dto/update-question.dto';\n\n@Injectable()\nexport class QuestionService {\n  create(createQuestionDto: CreateQuestionDto) {\n    return 'This action adds a new question';\n  }\n\n  findAll() {\n    return `This action returns all questions`;\n  }\n\n  findOne(id: string) {\n    return `This action returns a #${id} question`;\n  }\n\n  update(id: string, updateQuestionDto: UpdateQuestionDto) {\n    return `This action updates a #${id} question`;\n  }\n\n  remove(id: string) {\n    return `This action removes a #${id} question`;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ResourceBody.html":{"url":"interfaces/ResourceBody.html","title":"interface - ResourceBody","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ResourceBody\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/response/types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export type ValidationErrors = {\n  readonly [type: string]: {\n    readonly [type: string]: string;\n  };\n};\n\nexport interface IErrorBody {\n  readonly type?: string;\n  readonly title: string;\n  readonly status: number;\n  readonly detail?: string;\n  readonly instance?: string;\n  readonly validationErrors?: ValidationErrors;\n}\n\nexport interface PaginationMetaInterface {\n  readonly itemCount: number;\n  readonly totalItems: number;\n  readonly itemsPerPage: number;\n  readonly totalPages: number;\n  readonly currentPage: number;\n  readonly firstPageUrl?: string;\n  readonly lastPageUrl?: string;\n  readonly nextPageUrl?: string;\n  readonly previousPageUrl?: string;\n}\n\nexport interface ResourceBody {\n  readonly data: T;\n}\n\nexport interface ItemsBody {\n  readonly items: T;\n}\n\nexport type ISuccessBody = ResourceBody | ItemsBody;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ResponseTransformInterceptor.html":{"url":"injectables/ResponseTransformInterceptor.html","title":"injectable - ResponseTransformInterceptor","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ResponseTransformInterceptor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/interceptors/response-transform.interceptor.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                intercept\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        intercept\n                        \n                    \n                \n            \n            \n                \nintercept(context: ExecutionContext, next: CallHandler)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/interceptors/response-transform.interceptor.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        CallHandler\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CallHandler,\n  ExecutionContext,\n  Injectable,\n  NestInterceptor,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { ISuccessBody } from '../response/types';\nimport { ResponseMessageKey } from '../decorators/response.decorator';\nimport { Reflector } from '@nestjs/core';\n\nconst IgnoredPropertyName = Symbol('IgnoredPropertyName');\n\nexport function ResponseTransformInterceptorIgnore() {\n  return function (\n    target,\n    propertyKey: string,\n    descriptor: PropertyDescriptor,\n  ) {\n    descriptor.value[IgnoredPropertyName] = true;\n  };\n}\n\n@Injectable()\nexport class ResponseTransformInterceptor\n  implements NestInterceptor | null>\n{\n  intercept(\n    context: ExecutionContext,\n    next: CallHandler,\n  ): Observable | null> {\n    const responseMessage =\n      new Reflector().get(ResponseMessageKey, context.getHandler()) ??\n      '';\n    const isIgnored = context.getHandler()[IgnoredPropertyName];\n    if (!!isIgnored) {\n      return next.handle().pipe(map((data) => data));\n    }\n\n    return next.handle().pipe(\n      map((data: ISuccessBody | undefined) => {\n        if (data === undefined) {\n          return null;\n        }\n\n        if (data.hasOwnProperty('items')) {\n          return data;\n        }\n\n        return {\n          statusCode: context.switchToHttp().getResponse().statusCode,\n          reqId: context.switchToHttp().getRequest().reqId,\n          message: responseMessage ?? '',\n          data,\n        };\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SignUpDTO.html":{"url":"interfaces/SignUpDTO.html","title":"interface - SignUpDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SignUpDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/dto/authentication.dto.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            firstName\n                                        \n                                \n                                \n                                        \n                                            lastName\n                                        \n                                \n                                \n                                        \n                                            password\n                                        \n                                \n                                \n                                        \n                                            username\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        firstName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        firstName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lastName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface SignUpDTO{ username: string; password: string, firstName: string, lastName:string }\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TokenGuard.html":{"url":"injectables/TokenGuard.html","title":"injectable - TokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/guards/token.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('jwt')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handleRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handleRequest\n                        \n                    \n                \n            \n            \n                \nhandleRequest(err, user, info: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/authentication/guards/token.guard.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                err\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                user\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                info\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  CanActivate,\n  ExecutionContext,\n  HttpCode,\n  HttpException,\n  HttpStatus,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { Observable } from 'rxjs';\n\n@Injectable()\nexport class TokenGuard extends AuthGuard('jwt') {\n  handleRequest(err, user, info: any) {\n    if (info) {\n      throw new HttpException(\n        {\n          message: 'Token expired',\n          messageCode: 'TOKEN_EXPIRED',\n          statusCode: 403,\n        },\n        HttpStatus.FORBIDDEN,\n      );\n    }\n    if (err || !user) throw err || new UnauthorizedException();\n\n    return user;\n  }\n}\n\n@Injectable()\nexport class AuthCheckGuard extends AuthGuard('jwt') {\n  handleRequest(err, user, info: any) {\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TokenStorage.html":{"url":"interfaces/TokenStorage.html","title":"interface - TokenStorage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TokenStorage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/storage/token.storage.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            generateToken\n                                        \n                                \n                                \n                                        \n                                            validateToken\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        generateToken\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        generateToken:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        validateToken\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        validateToken:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface TokenStorage {\n  readonly generateToken: (user: any) => Promise;\n  readonly validateToken: (token: string) => Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateCategoryDto.html":{"url":"classes/UpdateCategoryDto.html","title":"class - UpdateCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/category/dto/update-category.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateCategoryDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateCategoryDto } from './create-category.dto';\n\nexport class UpdateCategoryDto extends PartialType(CreateCategoryDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateFaqCategoryDto.html":{"url":"classes/UpdateFaqCategoryDto.html","title":"class - UpdateFaqCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateFaqCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/faq-category/dto/update-faq-category.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateFaqCategoryDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateFaqCategoryDto } from './create-faq-category.dto';\n\nexport class UpdateFaqCategoryDto extends PartialType(CreateFaqCategoryDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateFaqDto.html":{"url":"classes/UpdateFaqDto.html","title":"class - UpdateFaqDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateFaqDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/faq/dto/update-faq.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateFaqDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateFaqDto } from './create-faq.dto';\n\nexport class UpdateFaqDto extends PartialType(CreateFaqDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateQuestionDto.html":{"url":"classes/UpdateQuestionDto.html","title":"class - UpdateQuestionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateQuestionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/question/dto/update-question.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateQuestionDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateQuestionDto } from './create-question.dto';\n\nexport class UpdateQuestionDto extends PartialType(CreateQuestionDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/update-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                firstName\n                            \n                            \n                                    \n                                lastName\n                            \n                            \n                                    \n                                    \n                                password\n                            \n                            \n                                    \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: 'String', unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        firstName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        lastName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: 'string'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: 'String'})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: 'Number', description: '0:deleted, 1:active', default: 0})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:36\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from \"@nestjs/mongoose\";\nimport { Document } from \"mongoose\";\nimport { Exclude } from \"class-transformer\";\n\n@Schema({\n    timestamps: true,\n    toJSON: { virtuals: true },\n    toObject: { virtuals: true },\n})\nexport class User extends Document{\n    @Prop()\n    firstName: string;\n\n    @Prop({\n        type: 'string',\n    })\n    lastName: string;\n\n    @Prop({\n        type: 'String',\n        unique:true\n      })\n      email: string;\n    \n      @Prop({\n        type: 'String',\n      })\n      @Exclude()\n      password: string;\n\n    @Prop({\n        type: 'Number',\n        description: '0:deleted, 1:active',\n        default: 0,\n    })\n    status: number;\n}\n\nexport type UserType = User & Document;\nexport const UserSchema = SchemaFactory.createForClass(User);\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                create\n                            \n                            \n                                    \n                                findAll\n                            \n                            \n                                    \n                                findOne\n                            \n                            \n                                    \n                                remove\n                            \n                            \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createUserDto: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:18\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')\n                \n            \n\n                    \n                        \n                            Defined in src/user/user.controller.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Post, Body, Patch, Param, Delete } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { ApiTags } from \"@nestjs/swagger\";\n\n@ApiTags(\"User\")\n@Controller('user')\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  @Post()\n  create(@Body() createUserDto: any) {\n    return this.userService.create(createUserDto);\n  }\n\n  @Get()\n  findAll() {\n    return this.userService.findAll();\n  }\n\n  @Get(':id')\n  findOne(@Param('id') id: string) {\n    return this.userService.findOne(id);\n  }\n\n  @Patch(':id')\n  update(@Param('id') id: string, @Body() updateUserDto: UpdateUserDto) {\n    return this.userService.update(id, updateUserDto);\n  }\n\n  @Delete(':id')\n  remove(@Param('id') id: string) {\n    return this.userService.remove(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserModule_imports\n\n\n\n\nQuestionModule\n\nQuestionModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nQuestionModule->UserModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            QuestionModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { UserController } from './user.controller';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { QuestionModule } from '../question/question.module';\nimport { User, UserSchema } from './entities/user.entity';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: User.name, schema: UserSchema }]),\n    QuestionModule,\n  ],\n  controllers: [UserController],\n  providers: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                customMethod\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createUserDto: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:14\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        customMethod\n                        \n                    \n                \n            \n            \n                \ncustomMethod()\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:26\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:34\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { User, UserType } from './entities/user.entity';\nimport { Model } from 'mongoose';\n\n@Injectable()\nexport class UserService {\n  constructor(\n    @InjectModel(User.name)\n    private readonly userModel: Model,\n  ) {}\n  create(createUserDto: any) {\n    return this.userModel.create({\n      firstName: createUserDto.firstName,\n      lastName: createUserDto.lastName,\n      status: createUserDto.status,\n    });\n  }\n\n  findAll() {\n    return this.userModel.find({});\n  }\n\n  customMethod() {\n    return `This action returns all custom method`;\n  }\n\n  findOne(id: any) {\n    return this.userModel.findOne(id);\n  }\n\n  update(id: string, updateUserDto: UpdateUserDto) {\n    return this.userModel.findByIdAndUpdate(id, {\n      ...updateUserDto,\n    });\n  }\n\n  remove(id: string) {\n    return this.userModel.deleteOne({ _id: id });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/authentication/authentication.controller.ts\n            \n            controller\n            AuthenticationController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/authentication/authentication.service.ts\n            \n            injectable\n            AuthenticationService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/dto/authentication.dto.ts\n            \n            interface\n            SignUpDTO\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/authentication/guards/token.guard.ts\n            \n            injectable\n            AuthCheckGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/authentication/guards/token.guard.ts\n            \n            injectable\n            TokenGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/authentication/providers/token-storage.provider.ts\n            \n            variable\n            TokenStorageProvider\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/authentication/storage/jwt.storage.ts\n            \n            class\n            JwtStorage\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/authentication/storage/token.storage.ts\n            \n            interface\n            TokenStorage\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/strategy/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/strategy/local.strategy.ts\n            \n            class\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/category/category.controller.ts\n            \n            controller\n            CategoryController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/category/category.service.ts\n            \n            injectable\n            CategoryService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/category/dto/create-category.dto.ts\n            \n            class\n            CreateCategoryDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/category/dto/update-category.dto.ts\n            \n            class\n            UpdateCategoryDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/category/entities/category.entity.ts\n            \n            class\n            Category\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/category/entities/category.entity.ts\n            \n            variable\n            CategorySchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/decorators/response.decorator.ts\n            \n            variable\n            ResponseMessage\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/decorators/response.decorator.ts\n            \n            variable\n            ResponseMessageKey\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/interceptors/response-transform.interceptor.ts\n            \n            injectable\n            ResponseTransformInterceptor\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/interceptors/response-transform.interceptor.ts\n            \n            function\n            ResponseTransformInterceptorIgnore\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/interceptors/response-transform.interceptor.ts\n            \n            variable\n            IgnoredPropertyName\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/core/response/types.ts\n            \n            interface\n            IErrorBody\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/core/response/types.ts\n            \n            interface\n            ItemsBody\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/core/response/types.ts\n            \n            interface\n            PaginationMetaInterface\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/core/response/types.ts\n            \n            interface\n            ResourceBody\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/faq-category/dto/create-faq-category.dto.ts\n            \n            class\n            CreateFaqCategoryDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/faq-category/dto/update-faq-category.dto.ts\n            \n            class\n            UpdateFaqCategoryDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/faq-category/entities/faq-category.entity.ts\n            \n            class\n            FaqCategory\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/faq-category/entities/faq-category.entity.ts\n            \n            variable\n            FaqCategorySchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/faq-category/faq-category.controller.ts\n            \n            controller\n            FaqCategoryController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/faq-category/faq-category.service.ts\n            \n            injectable\n            FaqCategoryService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/faq/dto/create-faq.dto.ts\n            \n            class\n            CreateFaqDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/faq/dto/update-faq.dto.ts\n            \n            class\n            UpdateFaqDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/faq/entities/faq.entity.ts\n            \n            class\n            Faq\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/faq/entities/faq.entity.ts\n            \n            variable\n            FaqSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/faq/faq.controller.ts\n            \n            controller\n            FaqController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/faq/faq.service.ts\n            \n            injectable\n            FaqService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            module\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/question/dto/create-question.dto.ts\n            \n            class\n            CreateQuestionDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/question/dto/update-question.dto.ts\n            \n            class\n            UpdateQuestionDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/question/entities/question.entity.ts\n            \n            class\n            Question\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/question/question.controller.ts\n            \n            controller\n            QuestionController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/question/question.service.ts\n            \n            injectable\n            QuestionService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/user/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/entities/user.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/user/entities/user.entity.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/8)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/class-transformer : ^0.4.0\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.1.1\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/mongoose : ^10.0.1\n        \n            @nestjs/passport : ^10.0.2\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/platform-socket.io : ^10.2.8\n        \n            @nestjs/swagger : ^7.1.14\n        \n            @nestjs/websockets : ^10.2.8\n        \n            @types/bcrypt : ^5.0.1\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.0\n        \n            moment : ^2.29.4\n        \n            mongodb : ^6.2.0\n        \n            mongoose : ^8.0.0\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ^7.8.1\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                        \n                            ResponseTransformInterceptorIgnore   (src/.../response-transform.interceptor.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n    src/core/interceptors/response-transform.interceptor.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ResponseTransformInterceptorIgnore\n                        \n                    \n                \n            \n            \n                \nResponseTransformInterceptorIgnore()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nExample :$ npm installRunning the app\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthenticationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CategoryModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FaqCategoryModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FaqModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        QuestionModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthenticationModule\n\n\n\ncluster_AuthenticationModule_providers\n\n\n\ncluster_CategoryModule\n\n\n\ncluster_CategoryModule_providers\n\n\n\ncluster_FaqCategoryModule\n\n\n\ncluster_FaqCategoryModule_providers\n\n\n\ncluster_FaqModule\n\n\n\ncluster_FaqModule_providers\n\n\n\ncluster_QuestionModule\n\n\n\ncluster_QuestionModule_exports\n\n\n\ncluster_QuestionModule_providers\n\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthenticationModule->AppModule\n\n\n\n\n\nCategoryModule\n\nCategoryModule\n\nAppModule -->\n\nCategoryModule->AppModule\n\n\n\n\n\nFaqCategoryModule\n\nFaqCategoryModule\n\nAppModule -->\n\nFaqCategoryModule->AppModule\n\n\n\n\n\nFaqModule\n\nFaqModule\n\nAppModule -->\n\nFaqModule->AppModule\n\n\n\n\n\nQuestionModule\n\nQuestionModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nQuestionModule->UserModule\n\n\n\nAppModule -->\n\nQuestionModule->AppModule\n\n\n\n\n\nQuestionService \n\nQuestionService \n\nQuestionService  -->\n\nQuestionModule->QuestionService \n\n\n\nAuthenticationModule -->\n\nUserModule->AuthenticationModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthenticationService\n\nAuthenticationService\n\nAuthenticationModule -->\n\nAuthenticationService->AuthenticationModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthenticationModule -->\n\nJwtStrategy->AuthenticationModule\n\n\n\n\n\nUserService\n\nUserService\n\nAuthenticationModule -->\n\nUserService->AuthenticationModule\n\n\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\nCategoryService\n\nCategoryService\n\nCategoryModule -->\n\nCategoryService->CategoryModule\n\n\n\n\n\nFaqCategoryService\n\nFaqCategoryService\n\nFaqCategoryModule -->\n\nFaqCategoryService->FaqCategoryModule\n\n\n\n\n\nFaqService\n\nFaqService\n\nFaqModule -->\n\nFaqService->FaqModule\n\n\n\n\n\nQuestionService\n\nQuestionService\n\nQuestionModule -->\n\nQuestionService->QuestionModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        7 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    7 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    11 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    17 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    6 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CategoryType   (src/.../category.entity.ts)\n                        \n                        \n                            FaqCategoryType   (src/.../faq-category.entity.ts)\n                        \n                        \n                            FaqType   (src/.../faq.entity.ts)\n                        \n                        \n                            ISuccessBody   (src/.../types.ts)\n                        \n                        \n                            UserType   (src/.../user.entity.ts)\n                        \n                        \n                            ValidationErrors   (src/.../types.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/category/entities/category.entity.ts\n    \n    \n        \n            \n                \n                    \n                    CategoryType\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/faq-category/entities/faq-category.entity.ts\n    \n    \n        \n            \n                \n                    \n                    FaqCategoryType\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/faq/entities/faq.entity.ts\n    \n    \n        \n            \n                \n                    \n                    FaqType\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/core/response/types.ts\n    \n    \n        \n            \n                \n                    \n                    ISuccessBody\n                \n            \n            \n                \n                        ResourceBody | ItemsBody\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ValidationErrors\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/user/entities/user.entity.ts\n    \n    \n        \n            \n                \n                    \n                    UserType\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CategorySchema   (src/.../category.entity.ts)\n                        \n                        \n                            FaqCategorySchema   (src/.../faq-category.entity.ts)\n                        \n                        \n                            FaqSchema   (src/.../faq.entity.ts)\n                        \n                        \n                            IgnoredPropertyName   (src/.../response-transform.interceptor.ts)\n                        \n                        \n                            module   (src/.../main.ts)\n                        \n                        \n                            ResponseMessage   (src/.../response.decorator.ts)\n                        \n                        \n                            ResponseMessageKey   (src/.../response.decorator.ts)\n                        \n                        \n                            TokenStorageProvider   (src/.../token-storage.provider.ts)\n                        \n                        \n                            UserSchema   (src/.../user.entity.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/category/entities/category.entity.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CategorySchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Category)\n                    \n                \n\n\n        \n    \n\n    src/faq-category/entities/faq-category.entity.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        FaqCategorySchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(FaqCategory)\n                    \n                \n\n\n        \n    \n\n    src/faq/entities/faq.entity.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        FaqSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Faq)\n                    \n                \n\n\n        \n    \n\n    src/core/interceptors/response-transform.interceptor.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IgnoredPropertyName\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Symbol('IgnoredPropertyName')\n                    \n                \n\n\n        \n    \n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        module\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n\n\n        \n    \n\n    src/core/decorators/response.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ResponseMessage\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (message: string) =>\n  SetMetadata(ResponseMessageKey, message)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ResponseMessageKey\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'ResponseMessageKey'\n                    \n                \n\n\n        \n    \n\n    src/authentication/providers/token-storage.provider.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        TokenStorageProvider\n                        \n                    \n                \n            \n                \n                    \n                        Default value : {\n  provide: 'TokenStorage',\n  useClass: JwtStorage,\n} as Provider\n                    \n                \n\n\n        \n    \n\n    src/user/entities/user.entity.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(User)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
